.type Expression =
      Number                {n: number}
    | Identifier            {id: symbol}
    | Equal                 {e1: Expression, e2: Expression}
    | NotEqual              {e1: Expression, e2: Expression}
    | Add                   {e1: Expression, e2: Expression}
    | Mul                   {e1: Expression, e2: Expression}
    | Sub                   {e1: Expression, e2: Expression}
    | Mod                   {e1: Expression, e2: Expression}
    | ShiftLeft             {e1: Expression, e2: Expression}
    | BitwiseInclOr         {e1: Expression, e2: Expression}
    | BitwiseExclOr         {e1: Expression, e2: Expression}
    | BitwiseAnd            {e1: Expression, e2: Expression}
    | BitwiseNot            {e: Expression}
    | Not                   {e: Expression}
    | Or                    {e1: Expression, e2: Expression}
    | PreIncrement          {e: Expression}
    | PostIncrement         {e: Expression}
    | PreDecrement          {e: Expression}
    | PostDecrement         {e: Expression}
    | And                   {e1: Expression, e2: Expression}
    | ShiftRight            {e1: Expression, e2: Expression}
    | SwitchExpr            {e: Expression}
    | ShiftRightUnsigned    {e1: Expression, e2: Expression}
    | Div                   {e1: Expression, e2: Expression}
    | Assign                {e1: Expression, e2: Expression}
    | LessThan              {e1: Expression, e2: Expression}

.type Statement =
      IfThen                {e: Expression, s: Statement}
    | IfThenElse            {e: Expression, s1: Statement, s2: Statement}
    | While                 {e: Expression, s: Statement}
    | Assert                {e: Expression}
    | AssertDetailed        {e1: Expression, e2: Expression}
    | Do                    {e: Expression, s: Statement}
    | Block                 {s: StatementList}
    | Switch                {e: Expression, s: Statement}
    | Return                {e: Expression}
    | ReturnVoid            {}
    | Yield                 {e: Expression}
    | Empty                 {}

.type StatementList = [
    head: Statement,
    tail: StatementList
]

.decl token(s: symbol, c: symbol, n: number)

.decl block(s: Statement, n: number, l: number)
.decl block_statements(s: StatementList, n: number, l: number)
.decl block_statement(s: Statement, n: number, l: number)
.decl statement(s: Statement, n: number, l: number)
.decl empty_statement(s: Statement, n: number, l: number)
.decl statement_without_trailing_substatement(s: Statement, n: number, l: number)
.decl statement_no_short_if(s: Statement, n: number, l: number)
.decl assert_statement(s: Statement, n: number, l: number)
.decl if_then_statement(s: Statement, n: number, l: number)
.decl if_then_else_statement(s: Statement, n: number, l: number)
.decl while_statement(s: Statement, n: number, l: number)
.decl case_constant(e: Expression, n: number, l: number)
.decl switch_block(s: Statement, n: number, l: number)
.decl yield_statement(s: Statement, n: number, l: number)
.decl return_statement(s: Statement, n: number, l: number)
.decl switch_statement(s: Statement, n: number, l: number)
.decl do_statement(s: Statement, n: number, l: number)

.decl expression(e: Expression, n: number, l: number)
.decl inclusive_or_expression(e: Expression, n: number, l: number)
.decl pre_increment_expression(e: Expression, n: number, l: number)
.decl pre_decrement_expression(e: Expression, n: number, l: number)
.decl post_increment_expression(e: Expression, n: number, l: number)
.decl exclusive_or_expression(e: Expression, n: number, l: number)
.decl assignment_expression(e: Expression, n: number, l: number)
.decl conditional_expression(e: Expression, n: number, l: number)
.decl equality_expression(e: Expression, n: number, l: number)
.decl post_decrement_expression(e: Expression, n: number, l: number)
.decl conditional_or_expression(e: Expression, n: number, l: number)
.decl unary_expression_not_plus_minus(e: Expression, n: number, l: number)
.decl postfix_expression(e: Expression, n: number, l: number)
.decl conditional_and_expression(e: Expression, n: number, l: number)
.decl and_expression(e: Expression, n: number, l: number)
.decl relational_expression(e: Expression, n: number, l: number)
.decl shift_expression(e: Expression, n: number, l: number)
.decl expression_name(e: Expression, n: number, l: number)
.decl additive_expression(e: Expression, n: number, l: number)
.decl multiplicative_expression(e: Expression, n: number, l: number)
.decl unary_expression(e: Expression, n: number, l: number)
.decl switch_expression(e: Expression, n: number, l: number)

.decl root(s: Statement)

.input token

/************** Blocks and Statements ********************/

block($Block(nil), A, A + 1) :-
    token("TOKEN_BRACKET", "{", A),
    token("TOKEN_BRACKET", "}", A + 1).
block($Block(s), A, B + 1) :-
    token("TOKEN_BRACKET", "{", A),
    block_statements(s, A + 1, B), B >= A + 1,
    token("TOKEN_BRACKET", "}", B + 1).

block_statements([e, nil], A, B) :-
    block_statement(e, A, B).
block_statements([e, tail], A, C) :-
    block_statement(e, A, B), B >= A,
    block_statements(tail, B + 1, C), C >= B + 1.

// TODO
block_statement(e, A, B) :- statement(e, A, B).

// TODO: LocalVariableDeclarationStatement

// TODO: LocalVariableDeclaration

// TODO: LocalVariableType

statement(e, A, B) :- if_then_statement(e, A, B).
statement(e, A, B) :- if_then_else_statement(e, A, B).
statement(e, A, B) :- while_statement(e, A, B).
// ... TODO

statement_no_short_if(e, A, B) :- statement(e, A, B).
// ... TODO

statement_without_trailing_substatement(e, A, B) :- block(e, A, B).
statement_without_trailing_substatement(e, A, B) :- empty_statement(e, A, B).
// ... TODO

empty_statement($Empty, A, A) :-
    token("TOKEN_SEPARATOR", ";", A).

// TODO LabeledStatement

// TODO LabeledStatementNoShortIf

// TODO ExpressionStatement

// TODO StatementExpression

if_then_statement($IfThen(e, s), A, B) :-
    token("TOKEN_KEYWORD", "if", A),
    token("TOKEN_BRACKET", "(", A + 1),
    expression(e, A + 2, B), B >= A + 2,
    token("TOKEN_BRACKET", ")", B + 1),
    statement(s, B + 2, C), C >= B + 2.

if_then_else_statement($IfThenElse(e, s1, s2), A, D) :-
    token("TOKEN_KEYWORD", "if", A),
    token("TOKEN_BRACKET", "(", A + 1),
    expression(e, A + 2, B), B >= A + 2,
    token("TOKEN_BRACKET", ")", B + 1),
    statement_no_short_if(s1, B + 2, C), C >= B + 2,
    token("TOKEN_KEYWORD", "else", C + 1),
    statement(s2, C + 2, D), D >= C + 2.

// TODO IfThenElseStatementNoShortIf

assert_statement($Assert(e), A, B + 1) :-
    token("TOKEN_KEYWORD", "assert", A),
    expression(e, A + 1, B), B >= A + 1,
    token("TOKEN_SEPARATOR", ";", B + 1).
assert_statement($AssertDetailed(e1, e2), A, C + 1) :-
    token("TOKEN_KEYWORD", "assert", A),
    expression(e1, A + 1, B), B >= A + 1,
    token("TOKEN_SEPARATOR", ":", B + 1),
    expression(e2, B + 2, C), C >= B + 2,
    token("TOKEN_SEPARATOR", ";", C + 1).

switch_statement($Switch(e, $Empty), A, B) :-
    token("TOKEN_KEYWORD", "switch", A),
    token("TOKEN_BRACKET", "(", A + 1),
    expression(e, A + 2, B), B >= A + 2,
    token("TOKEN_BRACKET", ")", B + 1),
    switch_block($Empty, B + 2, C), C >= B + 2.

switch_block($Empty, A, A + 1) :-
    token("TOKEN_BRACKET", "{", A),
    token("TOKEN_BRACKET", "}", A + 1).
// TODO ...

// TODO SwitchRule

// TODO SwitchBlockStatementGroup

// TODO SwitchLabel

case_constant(e, A, B) :- conditional_expression(e, A, B).

while_statement($While(cond, do), A, C) :-
    token("TOKEN_KEYWORD", "while", A),
    token("TOKEN_BRACKET", "(", A + 1),
    expression(cond, A + 2, B), B >= A + 2,
    token("TOKEN_BRACKET", ")", B + 1),
    statement(do, B + 2, C),  C >= B + 2.

// TODO WhileStatementNoShortIf

do_statement($Do(cond, do), A, C + 2) :-
    token("TOKEN_KEYWORD", "do", A),
    statement(do, A + 1, B),  B >= A + 1,
    token("TOKEN_KEYWORD", "while", B + 1),
    token("TOKEN_BRACKET", "(", B + 2),
    expression(cond, B + 3, C), C >= B + 3,
    token("TOKEN_BRACKET", ")", C + 1),
    token("TOKEN_SEPARATOR", ";", C + 2).

// TODO ForStatement

// TODO ForStatementNoShortIf

// TODO BasicForStatement

// TODO BasicForStatementNoShortIf

// TODO ForInit

// TODO ForUpdate

// TODO StatementExpressionList

// TODO EnhancedForStatement

// TODO EnhancedForStatementNoShortIf

// TODO BreakStatement

yield_statement($Yield(e), A, B + 1) :-
    token("TOKEN_KEYWORD", "yield", A),
    expression(e, A + 1, B), B >= A + 1,
    token("TOKEN_SEPARATOR", ";", B + 1).

// TODO ContinueStatement

return_statement($ReturnVoid, A, A + 1) :-
    token("TOKEN_KEYWORD", "return", A),
    token("TOKEN_SEPARATOR", ";", A + 1).
return_statement($Return(e), A, B + 1) :-
    token("TOKEN_KEYWORD", "return", A),
    expression(e, A + 1, B), B >= A + 1,
    token("TOKEN_SEPARATOR", ";", B + 1).

// TODO ThrowStatement

// TODO SynchronizedStatement

// TODO TryStatement

// TODO Catches

// TODO CatchClause

// TODO CatchFormalParameter

// TODO CatchType

// TODO Finally

// TODO TryWithResourcesStatement

// TODO ResourceSpecification

// TODO ResourceList

// TODO Resource

/************** Expressions ********************/

#define INFIXOP(node, current_level, next_level, symbol) \
    current_level(node(e1, e2), A, C) :- \
        current_level(e1, A, B), B >= A, \
        token("TOKEN_OPERATOR", symbol, B + 1), \
        next_level(e2, B + 2, C), C >= B + 2.

#define PREFIXOP(node, current_level, next_level, symbol) \
    current_level(node(e1), A, B) :- \
        token("TOKEN_OPERATOR", symbol, A), \
        next_level(e1, A + 1, B), B >= A + 1.

#define POSTFIXOP(node, current_level, next_level, symbol) \
    current_level(node(e1), A, B + 1) :- \
        next_level(e1, A, B), B >= A, \
        token("TOKEN_OPERATOR", symbol, B + 1).

expression(e, A, B) :- conditional_expression(e, A, B).

assignment_expression(e, A, B) :- conditional_expression(e, A, B).

conditional_expression(e, A, B) :- conditional_or_expression(e, A, B).
conditional_expression(e, A, D) :-
    conditional_or_expression(e, A, B), B >= A,
    token("TOKEN_SEPARATOR", "?", B + 1),
    expression(e, B + 2, C), C >= B + 2,
    token("TOKEN_SEPARATOR", ":", C + 1),
    conditional_expression(e, C+2, D), D >= C + 2.
// TODO: lambda

conditional_or_expression(e, A, B) :- conditional_and_expression(e, A, B).
INFIXOP($Or, conditional_or_expression, conditional_and_expression, "||")

conditional_and_expression(e, A, B) :- inclusive_or_expression(e, A, B).
INFIXOP($And, conditional_and_expression, inclusive_or_expression, "&&")

inclusive_or_expression(e, A, B) :- exclusive_or_expression(e, A, B).
INFIXOP($BitwiseInclOr, inclusive_or_expression, exclusive_or_expression, "|")

exclusive_or_expression(e, A, B) :- and_expression(e, A, B).
INFIXOP($BitwiseExclOr, exclusive_or_expression, and_expression, "^")

and_expression(e, A, B) :- equality_expression(e, A, B).
INFIXOP($BitwiseAnd, and_expression, equality_expression, "&")

equality_expression(e, A, B) :-       relational_expression(e, A, B).
INFIXOP($Equal,    equality_expression, relational_expression, "==")
INFIXOP($NotEqual, equality_expression, relational_expression, "!=")

relational_expression(e, A, B) :- shift_expression(e, A, B).

shift_expression(e, A, B) :- additive_expression(e, A, B).
INFIXOP($ShiftLeft,          shift_expression, additive_expression, "<<")
INFIXOP($ShiftRight,         shift_expression, additive_expression, ">>")
INFIXOP($ShiftRightUnsigned, shift_expression, additive_expression, ">>>")

additive_expression(e, A, B) :- multiplicative_expression(e, A, B).
INFIXOP($Add, additive_expression, multiplicative_expression, "+")
INFIXOP($Sub, additive_expression, multiplicative_expression, "-")

multiplicative_expression(e, A, B) :- unary_expression(e, A, B).
INFIXOP($Mul, multiplicative_expression, unary_expression, "*")
INFIXOP($Div, multiplicative_expression, unary_expression, "/")
INFIXOP($Mod, multiplicative_expression, unary_expression, "%")

unary_expression(e, A, B) :- postfix_expression(e, A, B).
unary_expression(e, A, B) :- pre_increment_expression(e, A, B).
unary_expression(e, A, B) :- pre_decrement_expression(e, A, B).

PREFIXOP($PreIncrement, pre_increment_expression, unary_expression, "++")
PREFIXOP($PreDecrement, pre_decrement_expression, unary_expression, "--")

unary_expression_not_plus_minus(e, A, B) :- postfix_expression(e, A, B).
PREFIXOP($BitwiseNot, unary_expression_not_plus_minus, unary_expression, "~")
PREFIXOP($Not, unary_expression_not_plus_minus, unary_expression, "!")

postfix_expression(e, A, B) :- expression_name(e, A, B).
postfix_expression(e, A, B) :- post_increment_expression(e, A, B).
postfix_expression(e, A, B) :- post_decrement_expression(e, A, B).

POSTFIXOP($PostIncrement, post_increment_expression, postfix_expression, "++")
POSTFIXOP($PostDecrement, post_decrement_expression, postfix_expression, "--")

// TODO
expression_name($Identifier(id), A, A) :- token("TOKEN_IDENTIFIER", id, A).
expression_name($Number(to_number(n)), A, A) :- token("TOKEN_NUMBER", n, A).

switch_expression($SwitchExpr(e1), A, C) :-
    token("TOKEN_KEYWORD", "switch", A),
    token("TOKEN_BRACKET", "(", A + 1),
    expression(e1, A + 2, B),
    token("TOKEN_BRACKET", ")", B + 1),
    switch_block($Empty, B + 2, C).


/*************** Root *****************************/

root(s) :- statement(s, 1, N), token("TOKEN_EOF", _, N+1).

.output expression
.output statement
.output if_then_else_statement
