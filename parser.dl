/**
 * MIT License
 *
 * Copyright (c) 2021 Anton Lyxell
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Types
 **************************************************************************/

.type id = [type: symbol, from: number, to: number]
.type id_list = [head: id, tail: id_list]

/**
 * Helper functions and macros
 **************************************************************************/

.decl any_position(n: number)
any_position(n) :- token(_, n).
any_position(n) :- num_tokens(n).

#define ZERO_OR_MORE(take_many, take_one) \
    take_many(nil, A, A) :- any_position(A). \
    take_many([x, xs], A, C) :- take_one(x, A, B), take_many(xs, B, C).

#define ONE_OR_MORE(take_many, take_one) \
    take_many([x, nil], A, B) :- take_one(x, A, B). \
    take_many([x, xs], A, C) :- take_one(x, A, B), take_many(xs, B, C).

#define ONE_OR_MORE_SEPARATED_BY(take_many, take_one, separator) \
    take_many([x, nil], A, B) :- take_one(x, A, B). \
    take_many([x, xs], A, D) :- take_one(x, A, B), separator(B, C), take_many(xs, C, D).

#define OPTIONAL(take_zero_or_one, take_one) \
    take_zero_or_one(nil, A, A) :- any_position(A). \
    take_zero_or_one(x, A, B) :- take_one(x, A, B).

#define INFIX(node, rule_name, current_level, next_level, symbol) \
    .decl rule_name(id: id, a: number, b: number) \
    parent_of(id, "left", left), \
    parent_of(id, "right", right), \
    rule_name(id, A, C) :- \
        id = [node, A, C], \
        current_level(left, A, B), \
        token(symbol, B), \
        next_level(right, B + 1, C).

#define PREFIX(node, current_level, next_level, symbol) \
    current_level([node, A, B], A, B) :- \
        token(symbol, A), \
        next_level(_, A + 1, B).

#define POSTFIX(node, current_level, next_level, symbol) \
    current_level([node, A, B], A, B + 1) :- \
        next_level(_, A, B), \
        token(symbol, B).

#define DEFINE_TOKEN(name, str) \
    .decl name(a: number, b: number) \
    name(A, A + 1) :- token(str, A).

/**
 * Tokens
 **************************************************************************/

.input token
.decl token(s: symbol, n: number)

.input token_type
.decl token_type(n: number, s: symbol)

.input num_tokens
.decl num_tokens(n: number)

DEFINE_TOKEN(token_abstract,            "abstract")
DEFINE_TOKEN(token_ampersand,           "&")
DEFINE_TOKEN(token_arrow,               "->")
DEFINE_TOKEN(token_assert,              "assert")
DEFINE_TOKEN(token_asterisk,            "*")
DEFINE_TOKEN(token_at,                  "@")
DEFINE_TOKEN(token_boolean,             "boolean")
DEFINE_TOKEN(token_break,               "break")
DEFINE_TOKEN(token_byte,                "byte")
DEFINE_TOKEN(token_case,                "case")
DEFINE_TOKEN(token_catch,               "catch")
DEFINE_TOKEN(token_char,                "char")
DEFINE_TOKEN(token_class,               "class")
DEFINE_TOKEN(token_colon,               ":")
DEFINE_TOKEN(token_comma,               ",")
DEFINE_TOKEN(token_continue,            "continue")
DEFINE_TOKEN(token_default,             "default")
DEFINE_TOKEN(token_do,                  "do")
DEFINE_TOKEN(token_dot,                 ".")
DEFINE_TOKEN(token_double,              "double")
DEFINE_TOKEN(token_ellipsis,            "...")
DEFINE_TOKEN(token_else,                "else")
DEFINE_TOKEN(token_equal_sign,          "=")
DEFINE_TOKEN(token_exports,             "exports")
DEFINE_TOKEN(token_extends,             "extends")
DEFINE_TOKEN(token_final,               "final")
DEFINE_TOKEN(token_finally,             "finally")
DEFINE_TOKEN(token_float,               "float")
DEFINE_TOKEN(token_for,                 "for")
DEFINE_TOKEN(token_greater_than,        ">")
DEFINE_TOKEN(token_if,                  "if")
DEFINE_TOKEN(token_implements,          "implements")
DEFINE_TOKEN(token_import,              "import")
DEFINE_TOKEN(token_int,                 "int")
DEFINE_TOKEN(token_interface,           "interface")
DEFINE_TOKEN(token_left_curly_bracket,  "{")
DEFINE_TOKEN(token_left_paren,          "(")
DEFINE_TOKEN(token_left_square_bracket, "[")
DEFINE_TOKEN(token_less_than,           "<")
DEFINE_TOKEN(token_long,                "long")
DEFINE_TOKEN(token_native,              "native")
DEFINE_TOKEN(token_new,                 "new")
DEFINE_TOKEN(token_opens,               "opens")
DEFINE_TOKEN(token_package,             "package")
DEFINE_TOKEN(token_private,             "private")
DEFINE_TOKEN(token_protected,           "protected")
DEFINE_TOKEN(token_provides,            "provides")
DEFINE_TOKEN(token_public,              "public")
DEFINE_TOKEN(token_question_mark,       "?")
DEFINE_TOKEN(token_requires,            "requires")
DEFINE_TOKEN(token_return,              "return")
DEFINE_TOKEN(token_right_curly_bracket, "}")
DEFINE_TOKEN(token_right_paren,         ")")
DEFINE_TOKEN(token_right_square_bracket,"]")
DEFINE_TOKEN(token_semicolon,           ";")
DEFINE_TOKEN(token_short,               "short")
DEFINE_TOKEN(token_static,              "static")
DEFINE_TOKEN(token_strictfp,            "strictfp")
DEFINE_TOKEN(token_super,               "super")
DEFINE_TOKEN(token_switch,              "switch")
DEFINE_TOKEN(token_synchronized,        "synchronized")
DEFINE_TOKEN(token_this,                "this")
DEFINE_TOKEN(token_throw,               "throw")
DEFINE_TOKEN(token_throws,              "throws")
DEFINE_TOKEN(token_to,                  "to")
DEFINE_TOKEN(token_transient,           "transient")
DEFINE_TOKEN(token_transitive,          "transitive")
DEFINE_TOKEN(token_try,                 "try")
DEFINE_TOKEN(token_uses,                "uses")
DEFINE_TOKEN(token_var,                 "var")
DEFINE_TOKEN(token_vertical_bar,        "|")
DEFINE_TOKEN(token_void,                "void")
DEFINE_TOKEN(token_volatile,            "volatile")
DEFINE_TOKEN(token_while,               "while")
DEFINE_TOKEN(token_with,                "with")
DEFINE_TOKEN(token_yield,               "yield")

.decl token_comma?(a: number, b: number)
      token_comma?(A, A) :- any_position(A).
      token_comma?(A, B) :- token_comma(A, B).
.decl token_semicolon?(a: number, b: number)
      token_semicolon?(A, A) :- any_position(A).
      token_semicolon?(A, B) :- token_semicolon(A, B).
.decl token_literal_string(s: symbol, a: number, b: number)
      token_literal_string(s, A, A + 1) :-
      token_type(A, "string"),
      token(s, A).
.decl token_literal_integer(s: symbol, a: number, b: number)
      token_literal_integer(s, A, A + 1) :-
      token_type(A, "integer"),
      token(s, A).
.decl token_identifier(s: symbol, a: number, b: number)
      token_identifier(s, A, A + 1) :-
      token_type(A, "identifier"),
      token(s, A).

/**
 * Lexical structure
 * See ยง3 of https://docs.oracle.com/javase/specs/jls/se15/html/jls-19.html
 **************************************************************************/

.decl type_identifier(id: id, a: number, b: number)
type_identifier(id, A, B) :- identifier(id, _, A, B).

.decl identifier(id: id, str: symbol, a: number, b: number)
identifier(["identifier", A, B], str, A, B) :- token_identifier(str, A, B).

.decl identifier?(id: id, a: number, b: number)
identifier?(nil, A, A) :- any_position(A).
identifier?(nil, A, B) :- identifier(id, _, A, B).

.decl string_literal(id: id, str: symbol, a: number, b: number)
string_literal(["string_literal", A, B], str, A, B)
    :- token_literal_string(str, A, B).

.decl integer_literal(id: id, str: symbol, a: number, b: number)
integer_literal(["integer_literal", A, B], str, A, B)
    :- token_literal_integer(str, A, B).

.decl literal(id: id, a: number, b: number)
literal(id, A, B) :- integer_literal(id, _, A, B).
literal(id, A, B) :- string_literal(id, _, A, B).

/**
 * Types, Values and Variables
 * See ยง4 of https://docs.oracle.com/javase/specs/jls/se15/html/jls-19.html
 **************************************************************************/

.decl type(id: id, a: number, b: number)
type(e, A, B) :- primitive_type(e, A, B).
type(e, A, B) :- reference_type(e, A, B).

.decl primitive_type(id: id, a: number, b: number)
primitive_type(e, A, B) :- numeric_type(e, A, B).
primitive_type(["boolean_type", A, B], A, B) :- token_boolean(A, B).
// TODO annotations

.decl numeric_type(id: id, a: number, b: number)
numeric_type(id, A, B) :- integral_type(id, A, B).
numeric_type(id, A, B) :- floating_point_type(id, A, B).

.decl integral_type(id: id, a: number, b: number)
integral_type(["byte_type", A, B],  A, B) :- token_byte(A, B).
integral_type(["short_type", A, B], A, B) :- token_short(A, B).
integral_type(["int_type", A, B],   A, B) :- token_int(A, B).
integral_type(["long_type", A, B],  A, B) :- token_long(A, B).
integral_type(["char_type", A, B],  A, B) :- token_char(A, B).

.decl floating_point_type(id: id, a: number, b: number)
floating_point_type(["float_type", A, B],  A, B) :- token_float(A, B).
floating_point_type(["double_type", A, B], A, B) :- token_double(A, B).

.decl reference_type(id: id, a: number, b: number)
reference_type(t, A, B) :- class_or_interface_type(t, A, B).
reference_type(t, A, B) :- array_type(t, A, B).
// Note: the derivation of TypeVariable is omitted to handle an ambiguity in
// the Java grammar specification. The same derivation is handled by
// ClassOrInterfaceType โ ClassType โ {Annotation} TypeIdentifier

.decl class_or_interface_type(id: id, a: number, b: number)
class_or_interface_type(t, A, B) :- class_type(t, A, B).
class_or_interface_type(t, A, B) :- interface_type(t, A, B).

.decl class_type(id: id, a: number, b: number)
class_type(id, A, D) :-
    id = ["class_type", A, D],
    annotations?(_, A, B),
    type_identifier(_, B, C),
    type_arguments?(_, C, D).
class_type(id, A, F) :-
    id = ["class_type", A, F],
    package_name(_, A, B),
    token_dot(B, C),
    annotations?(_, C, D),
    type_identifier(_, D, E),
    type_arguments?(_, E, F).
class_type(id, A, F) :-
    id = ["class_type", A, F],
    class_or_interface_type(_, A, B),
    token_dot(B, C),
    annotations?(_, C, D),
    type_identifier(_, D, E),
    type_arguments?(_, E, F).

.decl interface_type(id: id, a: number, b: number)
interface_type(t, A, B) :- class_type(t, A, B).

.decl type_variable(id: id, a: number, b: number)
type_variable(["type_variable", A, B], A, C) :-
    annotations?(_, A, B),
    type_identifier(_, B, C).

.decl array_type(id: id, a: number, b: number)

parent_of(id, "type", type),
parent_of_list(id, "dimensions", dims),
array_type(id, A, C) :-
    id = ["array_type", A, C],
    primitive_type(type, A, B),
    dims(dims, B, C).

array_type(["array_type", A, C], A, C) :-
    class_or_interface_type(_, A, B),
    dims(_, B, C).

// Note: the derivation of TypeVariable is omitted to handle an ambiguity in
// the Java specification. The same derivation is handled by
// ClassOrInterfaceType โ ClassType โ {Annotation} TypeIdentifier

.decl dims(ids: id_list, a: number, b: number)
ONE_OR_MORE(dims, dim)

.decl dims?(ids: id_list, a: number, b: number)
OPTIONAL(dims?, dims)

.decl dim(id: id, a: number, b: number)
dim(["dimension", A, D], A, D) :-
    annotations?(_, A, B),
    token_left_square_bracket(B, C),
    token_right_square_bracket(C, D).

.decl type_parameter(id: id, a: number, b: number)
type_parameter(nil, A, D) :-
    type_parameter_modifiers?(_, A, B),
    type_identifier(_, B, C),
    type_bound?(_, C, D).

.decl type_parameter_modifier(id: id, a: number, b: number)
type_parameter_modifier(id, A, B) :- annotation(id, A, B).

.decl type_parameter_modifiers?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(type_parameter_modifiers?, type_parameter_modifier)

.decl type_bound(id: id, a: number, b: number)
type_bound(nil, A, D) :-
    token_extends(A, B),
    class_or_interface_type(_, B, C),
    additional_bounds?(_, C, D).
// Note: the derivation of TypeVariable is omitted to handle an ambiguity in
// the Java grammar specification. The same derivation is handled by
// ClassOrInterfaceType โ ClassType โ {Annotation} TypeIdentifier

.decl type_bound?(id: id, a: number, b: number)
OPTIONAL(type_bound?, type_bound)

.decl additional_bound(id: id, a: number, b: number)
additional_bound(id, A, C) :-
    token_ampersand(A, B),
    interface_type(id, B, C).

.decl additional_bounds?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(additional_bounds?, additional_bound)

.decl type_arguments(ids: id_list, a: number, b: number)
type_arguments(ids, A, D) :-
    token_less_than(A, B),
    type_argument_list(ids, B, C),
    token_greater_than(C, D).

.decl type_arguments?(ids: id_list, a: number, b: number)
OPTIONAL(type_arguments?, type_arguments)

.decl type_argument_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(type_argument_list, type_argument, token_comma)

.decl type_argument(id: id, a: number, b: number)
type_argument(id, A, B) :- reference_type(id, A, B).
type_argument(id, A, B) :- wildcard(id, A, B).

.decl wildcard(id: id, a: number, b: number)
wildcard(nil, A, D) :-
    annotations?(_, A, B),
    token_question_mark(B, C),
    wildcard_bounds(_, C, D).

.decl wildcard_bounds(id: id, a: number, b: number)
wildcard_bounds(nil, A, C) :-
    token_extends(A, B),
    reference_type(_, B, C).
wildcard_bounds(nil, A, C) :-
    token_super(A, B),
    reference_type(_, B, C).

/**
 * Names
 * See ยง6 of https://docs.oracle.com/javase/specs/jls/se15/html/jls-19.html
 **************************************************************************/

.decl module_name(id: id, children: id_list, a: number, b: number)
module_name(["module_name", A, B], [x, nil], A, B) :- identifier(x, _, A, B).
module_name(["module_name", A, D], [x, xs], A, D) :-
    module_name(_, xs, A, B),
    token_dot(B, C),
    identifier(x, _, C, D).

.decl package_name(ids: id_list, a: number, b: number)
package_name([x, nil], A, B) :- identifier(x, _, A, B).
package_name([x, xs], A, D) :-
    package_name(xs, A, B),
    token_dot(B, C),
    identifier(x, _, C, D).

.decl type_name(id: id, a: number, b: number)
type_name(["type_name", A, B], A, B) :- type_identifier(_, A, B).
type_name(["type_name", A, D], A, D) :-
    package_or_type_name(_, A, B),
    token_dot(B, C),
    type_identifier(_, C, D).

.decl expression_name(id: id, a: number, b: number)
parent_of_list(id, "identifiers", [x, nil]),
expression_name(id, A, B) :-
    id = ["expression_name", A, B],
    identifier(x, _, A, B).
parent_of_list(id, "identifiers", [x, xs]),
expression_name(id, A, D) :-
    id = ["expression_name", A, D],
    expression_name(tail, A, B),
    parent_of_list(tail, "identifiers", xs),
    token_dot(B, C),
    identifier(x, _, C, D).

.decl method_name(id: id, a: number, b: number)
method_name(id, A, B) :- identifier(id, str, A, B), str != "yield".

.decl package_or_type_name(id: id, a: number, b: number)
package_or_type_name(["package_or_type_name", A, B], A, B) :-
    token_identifier(_, A, B).
package_or_type_name(["package_or_type_name", A, D], A, D) :-
    package_or_type_name(_, A, B),
    token_dot(B, C),
    token_identifier(_, C, D).

.decl ambiguous_name(id: id, ids: id_list, a: number, b: number)
ambiguous_name(["ambiguous_name", A, B], [id, nil], A, B) :-
    identifier(id, _, A, B).
ambiguous_name(["ambiguous_name", A, D], [id, xs], A, D) :-
    ambiguous_name(_, xs, A, B),
    token_dot(B, C),
    identifier(id, _, C, D).

/**
 * Packages and Modules
 * See ยง7 of https://docs.oracle.com/javase/specs/jls/se15/html/jls-19.html
 **************************************************************************/

.decl compilation_unit(id: id, a: number, b: number)
compilation_unit(id, A, B) :- ordinary_compilation_unit(id, A, B).
compilation_unit(id, A, B) :- modular_compilation_unit(id, A, B).

.decl ordinary_compilation_unit(id: id, a: number, b: number)
parent_of(id, "package_declaration", pdecl),
parent_of_list(id, "import_declarations", impdecls),
parent_of_list(id, "type_declarations", typedecls),
ordinary_compilation_unit(id, A, D) :-
    id = ["ordinary_compilation_unit", A, D],
    package_declaration?(pdecl, A, B),
    import_declarations?(impdecls, B, C),
    type_declarations?(typedecls, C, D).

.decl modular_compilation_unit(id: id, a: number, b: number)
modular_compilation_unit(["modular_compilation_unit", A, C], A, C) :-
    import_declarations?(_, A, B),
    module_declaration(_, B, C).

.decl package_declaration(id: id, a: number, b: number)
package_declaration(["package_declaration", A, E], A, E) :-
    package_modifiers?(_, A, B),
    token_package(B, C),
    package_declaration_identifiers(_, C, D),
    token_semicolon(D, E).

.decl package_declaration?(id: id, a: number, b: number)
OPTIONAL(package_declaration?, package_declaration)

.decl package_declaration_identifiers(id: id_list, a: number, b: number)
package_declaration_identifiers([x, nil], A, B) :- identifier(x, _, A, B).
package_declaration_identifiers([x, xs], A, D) :-
    identifier(x, _, A, B),
    token_dot(B, C),
    package_declaration_identifiers(xs, C, D).

.decl package_modifier(id: id, a: number, b: number)
package_modifier(id, A, B) :- annotation(id, A, B).

.decl package_modifiers?(id: id_list, a: number, b: number)
ZERO_OR_MORE(package_modifiers?, package_modifier)

.decl import_declaration(id: id, a: number, b: number)
import_declaration(id, A, B) :- single_type_import_declaration(id, A, B).
import_declaration(id, A, B) :- type_import_on_demand_declaration(id, A, B).
import_declaration(id, A, B) :- single_static_import_declaration(id, A, B).
import_declaration(id, A, B) :- static_import_on_demand_declaration(id, A, B).

.decl import_declarations?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(import_declarations?, import_declaration)

.decl single_type_import_declaration(id: id, a: number, b: number)
parent_of(id, "name", name),
single_type_import_declaration(id, A, D) :-
    id = ["single_type_import_declaration", A, D],
    token_import(A, B),
    type_name(name, B, C),
    token_semicolon(C, D).

.decl type_import_on_demand_declaration(id: id, a: number, b: number)
type_import_on_demand_declaration(id, A, F) :-
    id = ["type_import_on_demand_declaration", A, F],
    token_import(A, B),
    type_name(_, B, C),
    token_dot(C, D),
    token_asterisk(D, E),
    token_semicolon(E, F).

.decl single_static_import_declaration(id: id, a: number, b: number)
single_static_import_declaration(id, A, G) :-
    id = ["single_static_import_declaration", A, G],
    token_import(A, B),
    token_static(B, C),
    type_name(_, C, D),
    token_dot(D, E),
    identifier(_, _, E, F),
    token_semicolon(F, G).

.decl static_import_on_demand_declaration(id: id, a: number, b: number)
static_import_on_demand_declaration(id, A, G) :-
    id = ["static_import_on_demand_declaration", A, G],
    token_import(A, B),
    token_static(B, C),
    type_name(_, C, D),
    token_dot(D, E),
    token_asterisk(E, F),
    token_semicolon(F, G).

.decl type_declaration(s: id, a: number, b: number)
type_declaration(id, A, B) :- class_declaration(id, A, B).
type_declaration(id, A, B) :- interface_declaration(id, A, B).

.decl type_declarations?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(type_declarations?, type_declaration)

.decl module_declaration(id: id, a: number, b: number)

.decl module_directive(id: id, a: number, b: number)

parent_of_list(id, "modifiers", mods),
module_directive(id, A, E) :-
    id = ["module_directive", A, E],
    token_requires(A, B),
    requires_modifiers?(mods, B, C),
    module_name(_, _, C, D),
    token_semicolon(D, E).

module_directive(id, A, D) :-
    id = ["module_directive", A, D],
    token_exports(A, B),
    package_name(_, B, C),
    token_semicolon(C, D).

module_directive(id, A, F) :-
    id = ["module_directive", A, D],
    token_exports(A, B),
    package_name(_, B, C),
    token_to(C, D),
    module_directive_module_name_list(_, _, D, E),
    token_semicolon(E, F).

module_directive(id, A, D) :-
    id = ["module_directive", A, D],
    token_opens(A, B),
    package_name(_, B, C),
    token_semicolon(C, D).

module_directive(["module_directive", A, F], A, F) :-
    token_opens(A, B),
    package_name(_, B, C),
    token_to(C, D),
    module_directive_module_name_list(_, _, D, E),
    token_semicolon(E, F).

module_directive(["module_directive", A, D], A, D) :-
    token_uses(A, B),
    type_name(t, B, C),
    token_semicolon(C, D).

module_directive(["module_directive", A, F], A, F) :-
    token_provides(A, B),
    type_name(_, B, C),
    token_with(C, D),
    module_directive_type_name_list(_, _, D, E),
    token_semicolon(E, F).

.decl module_directives?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(module_directives?, module_directive)

.decl module_directive_module_name_list(id: id, children: id_list,
                                        a: number, b: number)
module_directive_module_name_list(id, [x, nil], A, B) :-
    id = ["module_directive_module_name_list", A, B],
    module_name(x, _, A, B).
module_directive_module_name_list(id, [x, xs], A, D) :-
    id = ["module_directive_module_name_list", A, B],
    module_name(x, _, A, B),
    token_comma(B, C),
    module_directive_module_name_list(_, xs, C, D).

.decl module_directive_type_name_list(id: id, children: id_list,
                                      a: number, b: number)
module_directive_type_name_list(id, [x, nil], A, B) :-
    id = ["module_directive_type_name_list", A, B],
    type_name(x, A, B).
module_directive_type_name_list(id, [x, xs], A, D) :-
    id = ["module_directive_type_name_list", A, D],
    type_name(x, A, B),
    token_comma(B, C),
    module_directive_type_name_list(_, xs, C, D).

.decl requires_modifier(id: id, a: number, b: number)
requires_modifier(["static_modifier", A, B], A, B) :- token_static(A, B).
requires_modifier(["transitive_modifier", A, B], A, B) :-
    token_transitive(A, B).

.decl requires_modifiers?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(requires_modifiers?, requires_modifier)

/**
 * Classes
 * See ยง8 of https://docs.oracle.com/javase/specs/jls/se15/html/jls-19.html
 **************************************************************************/

.decl class_declaration(id: id, a: number, b: number)
class_declaration(id, A, B) :- normal_class_declaration(id, A, B).
class_declaration(id, A, B) :- enum_declaration(id, A, B).

.decl normal_class_declaration(id: id, a: number, b: number)
parent_of_list(id, "modifiers", mods),
parent_of(id, "type", t),
parent_of(id, "superclass", s),
parent_of_list(id, "body", body),
normal_class_declaration(id, A, F) :-
    id = ["normal_class_declaration", A, F],
    class_modifiers?(mods, A, B),
    token_class(B, C),
    type_identifier(t, C, D),
    superclass?(s, D, E),
    class_body(body, E, F).

.decl class_modifiers?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(class_modifiers?, class_modifier)

.decl class_modifier(s: id, a: number, b: number)
class_modifier(id,  A, B) :- annotation(id, A, B).
class_modifier(["public_modifier", A, B], A, B) :- token_public(A, B).
class_modifier(["protected_modifier", A, B],  A, B) :- token_protected(A, B).
class_modifier(["private_modifier", A, B], A, B) :- token_private(A, B).
class_modifier(["abstract_modifier", A, B], A, B) :- token_abstract(A, B).
class_modifier(["static_modifier", A, B], A, B) :- token_static(A, B).
class_modifier(["final_modifier", A, B], A, B) :- token_final(A, B).
class_modifier(["strictfp_modifier", A, B], A, B) :- token_strictfp(A, B).

.decl type_parameters(ids: id_list, a: number, b: number)
type_parameters(nil, A, A) :- any_position(A).
type_parameters(l, A, D) :-
    token_less_than(A, B),
    type_parameter_list(l, B, C),
    token_greater_than(C, D).

.decl type_parameter_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(type_parameter_list, type_parameter, token_comma)

.decl superclass(id: id, a: number, b: number)
superclass(id, A, C) :-
    token_extends(A, B),
    class_type(id, B, C).

.decl superclass?(id: id, a: number, b: number)
OPTIONAL(superclass?, superclass)

.decl superinterfaces(ids: id_list, a: number, b: number)
superinterfaces(ids, A, C) :-
    token_implements(A, B),
    interface_type_list(ids, B, C).

.decl interface_type_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(interface_type_list, interface_type, token_comma)

.decl class_body(id: id_list, a: number, b: number)
class_body(declarations, A, D) :-
    token_left_curly_bracket(A, B),
    class_body_declarations?(declarations, B, C),
    token_right_curly_bracket(C, D).

.decl class_body?(s: id_list, a: number, b: number)
OPTIONAL(class_body?, class_body)

.decl class_body_declarations?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(class_body_declarations?, class_body_declaration)

.decl class_body_declaration(id: id, a: number, b: number)
class_body_declaration(e, A, B) :- class_member_declaration(e, A, B).
class_body_declaration(e, A, B) :- instance_initializer(e, A, B).
class_body_declaration(e, A, B) :- static_initializer(e, A, B).
class_body_declaration(e, A, B) :- constructor_declaration(e, A, B).

.decl class_member_declaration(id: id, a: number, b: number)
class_member_declaration(id, A, B) :- field_declaration(id, A, B).
class_member_declaration(id, A, B) :- method_declaration(id, A, B).
class_member_declaration(id, A, B) :- class_declaration(id, A, B).
class_member_declaration(id, A, B) :- interface_declaration(id, A, B).
class_member_declaration(nil, A, B) :- token_semicolon(A, B).

.decl field_declaration(id: id, a: number, b: number)
parent_of_list(id, "modifiers", mods),
parent_of(id, "type", type),
parent_of_list(id, "declarations", decls),
field_declaration(id, A, E) :-
    id = ["field_declaration", A, E],
    field_modifiers?(mods, A, B),
    unann_type(type, B, C),
    variable_declarator_list(decls, C, D),
    token_semicolon(D, E).

.decl field_modifier(id: id, a: number, b: number)
field_modifier(id, A, B) :- annotation(id, A, B).
field_modifier(["public_modifier", A, B], A, B) :- token_public(A, B).
field_modifier(["protected_modifier", A, B], A, B) :- token_protected(A, B).
field_modifier(["private_modifier", A, B], A, B) :- token_private(A, B).
field_modifier(["static_modifier", A, B], A, B) :- token_static(A, B).
field_modifier(["final_modifier", A, B], A, B) :- token_final(A, B).
field_modifier(["transient_modifier", A, B], A, B) :- token_transient(A, B).
field_modifier(["volatile_modifier", A, B], A, B) :- token_volatile(A, B).

.decl field_modifiers?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(field_modifiers?, field_modifier)

.decl variable_declarator_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(variable_declarator_list, variable_declarator, token_comma)

.decl variable_declarator(id: id, a: number, b: number)
parent_of(id, "name", name),
variable_declarator(id, A, B) :-
    id = ["variable_declarator", A, B],
    variable_declarator_id(name, A, B).
parent_of(id, "name", name),
parent_of(id, "initializer", initializer),
variable_declarator(id, A, D) :-
    id = ["variable_declarator", A, D],
    variable_declarator_id(name, A, B),
    token_equal_sign(B, C),
    variable_initializer(initializer, C, D).

.decl variable_declarator_id(id: id, a: number, b: number)
variable_declarator_id(id, A, B) :- identifier(id, _, A, B).
variable_declarator_id(id, A, C) :-
    identifier(id, _, A, B),
    dims(_, B, C).

.decl variable_initializer(id: id, a: number, b: number)
variable_initializer(id, A, B) :- expression(id, A, B).
variable_initializer(id, A, B) :- array_initializer(id, A, B).

.decl unann_type(id: id, a: number, b: number)
unann_type(id, A, B) :- unann_primitive_type(id, A, B).
unann_type(id, A, B) :- unann_reference_type(id, A, B).

.decl unann_primitive_type(id: id, a: number, b: number)
unann_primitive_type(["boolean_type", A, B], A, B) :- token_boolean(A, B).
unann_primitive_type(e, A, B) :- numeric_type(e, A, B).

.decl unann_reference_type(id: id, a: number, b: number)
unann_reference_type(id, A, B) :- unann_class_or_interface_type(id, A, B).
unann_reference_type(id, A, B) :- unann_array_type(id, A, B).
// Note: the derivation of UnannTypeVariable is omitted to handle an ambiguity
// in the Java specification. The same derivation is handled by
// UnannClassOrInterfaceType โ UnannClassType -> TypeIdentifier

.decl unann_class_or_interface_type(id: id, a: number, b: number)
unann_class_or_interface_type(id, A, B) :- unann_class_type(id, A, B).
unann_class_or_interface_type(id, A, B) :- unann_interface_type(id, A, B).

.decl unann_class_type(id: id, a: number, b: number)
parent_of_list(id, "type_arguments", typeargs),
parent_of_list(id, "annotations", nil),
parent_of(id, "name", name),
unann_class_type(id, A, C) :-
    id = ["class_type", A, C],
    type_identifier(name, A, B),
    type_arguments?(typeargs, B, C).

parent_of_list(id, "type_arguments", typeargs),
parent_of_list(id, "annotations", annotations),
parent_of(id, "name", name),
unann_class_type(nil, A, F) :-
    id = ["class_type", A, F],
    package_name(_, A, B),
    token_dot(B, C),
    annotations?(annotations, C, D),
    type_identifier(name, D, E),
    type_arguments?(typeargs, E, F).

parent_of_list(id, "type_arguments", typeargs),
parent_of_list(id, "annotations", annotations),
parent_of(id, "name", name),
unann_class_type(nil, A, F) :-
    id = ["class_type", A, F],
    unann_class_or_interface_type(_, A, B),
    token_dot(B, C),
    annotations?(annotations, C, D),
    type_identifier(name, D, E),
    type_arguments?(typeargs, E, F).

.decl unann_interface_type(id: id, a: number, b: number)
unann_interface_type(id, A, B) :- unann_class_type(id, A, B).

.decl unann_type_variable(id: id, a: number, b: number)
unann_type_variable(["type_variable", A, B], A, B) :-
    type_identifier(_, A, B).

.decl unann_array_type(id: id, a: number, b: number)
parent_of(id, "type", type),
parent_of_list(id, "dimensions", dims),
unann_array_type(id, A, C) :-
    id = ["array_type", A, C],
    primitive_type(type, A, B),
    dims(dims, B, C).
parent_of(id, "type", type),
parent_of_list(id, "dimensions", dims),
unann_array_type(id, A, C) :-
    id = ["array_type", A, C],
    unann_class_or_interface_type(type, A, B),
    dims(dims, B, C).

// Note: the derivation of UnannTypeVariable is omitted to handle an ambiguity
// in the Java specification. The same derivation is handled by
// UnannClassOrInterfaceType โ UnannClassType -> TypeIdentifier

.decl method_declaration(id: id, a: number, b: number)
parent_of_list(id, "modifiers", mods),
parent_of(id, "header", header),
parent_of(id, "body", body),
method_declaration(id, A, D) :-
    id = ["method_declaration", A, D],
    method_modifiers?(mods, A, B),
    method_header(header, B, C),
    method_body(body, C, D).

.decl method_modifiers?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(method_modifiers?, method_modifier)

.decl method_modifier(id: id, a: number, b: number)
method_modifier(["public_modifier", A, B], A, B) :- token_public(A, B).
method_modifier(["protected_modifier", A, B], A, B) :- token_protected(A, B).
method_modifier(["private_modifier", A, B], A, B) :- token_private(A, B).
method_modifier(["abstract_modifier", A, B], A, B) :- token_abstract(A, B).
method_modifier(["static_modifier", A, B], A, B) :- token_static(A, B).
method_modifier(["final_modifier", A, B], A, B) :- token_final(A, B).
method_modifier(["synchronized_modifier", A, B], A, B) :-
    token_synchronized(A, B).
method_modifier(["native_modifier", A, B], A, B) :- token_native(A, B).
method_modifier(["strictfp_modifier", A, B], A, B) :- token_strictfp(A, B).

.decl method_header(id: id, a: number, b: number)
parent_of(id, "result", res),
parent_of(id, "declarator", decl),
parent_of(id, "throws", throws),
method_header(id, A, D) :-
    id = ["method_header", A, D],
    result(res, A, B),
    method_declarator(decl, B, C),
    throws?(throws, C, D).

.decl result(id: id, a: number, b: number)
result(t, A, B) :- unann_type(t, A, B).
result(["void_type", A, B], A, B) :- token_void(A, B).

.decl method_declarator(id: id, a: number, b: number)
parent_of(id, "name", name),
parent_of(id, "receiver", receiver),
parent_of_list(id, "params", params),
parent_of_list(id, "dimensions", dims),
method_declarator(id, A, H) :-
    id = ["method_declarator", A, H],
    identifier(name, _, A, B),
    token_left_paren(B, C),
    receiver_parameter(receiver, C, D),
    token_comma(D, E),
    formal_parameter_list?(params, E, F),
    token_right_paren(F, G),
    dims?(dims, G, H).
parent_of(id, "name", name),
parent_of(id, "receiver", nil),
parent_of_list(id, "params", params),
parent_of_list(id, "dimensions", dims),
method_declarator(id, A, F) :-
    id = ["method_declarator", A, F],
    identifier(name, _, A, B),
    token_left_paren(B, C),
    formal_parameter_list?(params, C, D),
    token_right_paren(D, E),
    dims?(dims, E, F).

.decl receiver_parameter(id: id, a: number, b: number)
receiver_parameter(["receiver_parameter", A, F], A, F) :-
    annotations?(nil, A, B),
    unann_type(_, B, C),
    identifier(_, _, C, D),
    token_dot(D, E),
    token_this(E, F).
receiver_parameter(["receiver_parameter", A, D], A, D) :-
    annotations?(_, A, B),
    unann_type(_, B, C),
    token_this(C, D).

.decl formal_parameter_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(formal_parameter_list, formal_parameter, token_comma)

.decl formal_parameter_list?(ids: id_list, a: number, b: number)
OPTIONAL(formal_parameter_list?, formal_parameter_list)

.decl formal_parameter(id: id, a: number, b: number)
formal_parameter(id, A, D) :-
    id = ["formal_parameter", A, D],
    variable_modifiers?(_, A, B),
    unann_type(_, B, C),
    variable_declarator_id(_, C, D).
formal_parameter(id, A, B) :- variable_arity_parameter(id, A, B).

.decl variable_arity_parameter(id: id, a: number, b: number)
variable_arity_parameter(id, A, F) :-
    id = ["variable_arity_parameter", A, F],
    variable_modifiers?(_, A, B),
    unann_type(_, B, C),
    annotations?(_, C, D),
    token_ellipsis(D, E),
    identifier(_, _, E, F).

.decl variable_modifier(id: id, a: number, b: number)
variable_modifier(id, A, B) :- annotation(id, A, B).
variable_modifier(["final_modifier", A, B], A, B) :- token_final(A, B).

.decl variable_modifiers?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(variable_modifiers?, variable_modifier)

.decl throws(id: id, a: number, b: number)
parent_of_list(id, "exceptions", ids),
throws(id, A, C) :-
    id = ["throws", A, C],
    token_throws(A, B),
    exception_type_list(ids, B, C).

.decl throws?(id: id, a: number, b: number)
OPTIONAL(throws?, throws)

.decl exception_type_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(exception_type_list, exception_type, token_comma)

.decl exception_type(id: id, a: number, b: number)
exception_type(id, A, B) :- class_type(id, A, B).
// Note: the derivation of TypeVariable is omitted to handle an ambiguity in
// the Java specification. The same derivation is handled by
// ClassType โ {Annotation} TypeIdentifier

.decl method_body(id: id, a: number, b: number)
method_body(id, A, B) :- block(id, A, B).
method_body(nil, A, B) :- token_semicolon(A, B).

.decl instance_initializer(id: id, a: number, b: number)
instance_initializer(["instance_initializer", A, B], A, B)
    :- block(_, A, B).

.decl static_initializer(id: id, a: number, b: number)
static_initializer(["static_initializer", A, C], A, C) :-
    token_static(A, B),
    block(_, B, C).

.decl constructor_declaration(id: id, a: number, b: number)

.decl constructor_modifier(id: id, a: number, b: number)
constructor_modifier(id, A, B) :- annotation(id, A, B).
constructor_modifier(["public_modifier", A, B], A, B) :- token_public(A, B).
constructor_modifier(["protected_modifier", A, B], A, B) :-
    token_protected(A, B).
constructor_modifier(["private_modifier", A, B], A, B) :- token_private(A, B).

.decl constructor_declarator(id: id, a: number, b: number)

.decl simple_type_name(id: id, l: number, n: number)
simple_type_name(["simple_type_name", A, B], A, B) :- type_identifier(_, A, B).

.decl constructor_body(id: id, a: number, b: number)

.decl explicit_constructor_invocation(id: id, a: number, b: number)

.decl enum_declaration(id: id, a: number, b: number)

.decl enum_body(id: id, a: number, b: number)
enum_body(nil, A, F) :-
    token_left_curly_bracket(A, B),
    enum_constant_list?(_, B, C),
    token_comma?(C, D),
    enum_body_declarations?(_, D, E),
    token_right_curly_bracket(E, F).

.decl enum_constant_list(id: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(enum_constant_list, enum_constant, token_comma)

.decl enum_constant_list?(id: id_list, a: number, b: number)
OPTIONAL(enum_constant_list?, enum_constant_list)

.decl enum_constant(id: id, a: number, b: number)
enum_constant(nil, A, D) :-
    enum_constant_modifiers?(_, A, B),
    identifier(_, _, B, C),
    class_body?(_, C, D).

.decl enum_constant_modifier(id: id, a: number, b: number)
enum_constant_modifier(id, A, B) :- annotation(id, A, B).

.decl enum_constant_modifiers?(id: id_list, a: number, b: number)
ZERO_OR_MORE(enum_constant_modifiers?, enum_constant_modifier)

.decl enum_body_declarations(ids: id_list, a: number, b: number)
enum_body_declarations(ids, A, C) :-
    token_semicolon(A, B),
    class_body_declarations?(ids, B, C).

.decl enum_body_declarations?(e: id_list, a: number, b: number)
OPTIONAL(enum_body_declarations?, enum_body_declarations)

/**
 * Interfaces
 * See ยง9 of https://docs.oracle.com/javase/specs/jls/se15/html/jls-19.html
 **************************************************************************/

.decl interface_declaration(id: id, a: number, b: number)
interface_declaration(id, A, B) :- normal_interface_declaration(id, A, B).
interface_declaration(id, A, B) :- annotation_type_declaration(id, A, B).

.decl normal_interface_declaration(id: id, a: number, b: number)

.decl interface_modifier(id: id, a: number, b: number)
interface_modifier(["public_modifier", A, B], A, B) :- token_public(A, B).
interface_modifier(["protected_modifier", A, B], A, B) :- token_protected(A, B).
interface_modifier(["private_modifier", A, B], A, B) :- token_private(A, B).
interface_modifier(["abstract_modifier", A, B], A, B) :- token_abstract(A, B).
interface_modifier(["static_modifier", A, B], A, B) :- token_static(A, B).
interface_modifier(["strictfp_modifier", A, B], A, B) :- token_strictfp(A, B).

.decl interface_modifiers?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(interface_modifiers?, interface_modifier)

.decl extends_interfaces(a: number, b: number)

.decl interface_body(a: number, b: number)

.decl interface_member_declaration(a: number, b: number)

.decl constant_declaration(id: id, a: number, b: number)

.decl constant_modifier(id: id, a: number, b: number)
constant_modifier(id, A, B) :- annotation(id, A, B).
constant_modifier(["public_modifier", A, B], A, B) :- token_public(A, B).
constant_modifier(["static_modifier", A, B], A, B) :- token_static(A, B).
constant_modifier(["final_modifier", A, B], A, B) :- token_final(A, B).

.decl interface_method_declaration(a: number, b: number)

.decl interface_method_modifier(id: id, a: number, b: number)
interface_method_modifier(id, A, B) :- annotation(id, A, B).
interface_method_modifier(["public_modifier", A, B], A, B) :-
    token_public(A, B).
interface_method_modifier(["private_modifier", A, B], A, B) :-
    token_private(A, B).
interface_method_modifier(["abstract_modifier", A, B], A, B) :-
    token_abstract(A, B).
interface_method_modifier(["default_modifier", A, B], A, B) :-
    token_default(A, B).
interface_method_modifier(["static_modifier", A, B], A, B) :-
    token_static(A, B).
interface_method_modifier(["strictfp_modifier", A, B], A, B) :-
    token_strictfp(A, B).

.decl annotation_type_declaration(id: id, a: number, b: number)
annotation_type_declaration(["annotation_type_declaration", A, F], A, F) :-
    interface_modifiers?(_, A, B),
    token_at(B, C),
    token_interface(C, D),
    type_identifier(_, D, E),
    annotation_type_body(_, E, F).

.decl annotation_type_body(ids: id_list, a: number, b: number)
annotation_type_body(decls, A, D) :-
    token_left_curly_bracket(A, B),
    annotation_type_member_declarations?(decls, B, C),
    token_right_curly_bracket(C, D).

.decl annotation_type_member_declaration(id: id, a: number, b: number)
annotation_type_member_declaration(d, A, B) :-
    annotation_type_element_declaration(d, A, B).
annotation_type_member_declaration(d, A, B) :- constant_declaration(d, A, B).
annotation_type_member_declaration(d, A, B) :- class_declaration(d, A, B).
annotation_type_member_declaration(d, A, B) :- interface_declaration(d, A, B).
annotation_type_member_declaration(nil, A, B) :- token_semicolon(A, B).

.decl annotation_type_member_declarations?(d: id_list, a: number, b: number)
ZERO_OR_MORE(annotation_type_member_declarations?,
             annotation_type_member_declaration)


.decl annotation_type_element_declaration(id: id, a: number, b: number)

.decl annotation_type_element_modifier(id: id, a: number, b: number)
annotation_type_element_modifier(["public_modifier", A, B], A, B) :-
    token_public(A, B).
annotation_type_element_modifier(["abstract_modifier", A, B], A, B) :-
    token_abstract(A, B).

.decl annotation_type_element_modifiers?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(annotation_type_element_modifiers?,
             annotation_type_element_modifier)

.decl default_value(id: id, a: number, b: number)
default_value(e, A, C) :-
    token_default(A, B),
    element_value(e, B, C).

.decl annotation(id: id, a: number, b: number)
annotation(e, A, B) :- normal_annotation(e, A, B).

.decl annotations?(id: id_list, a: number, b: number)
ZERO_OR_MORE(annotations?, annotation)

.decl normal_annotation(id: id, a: number, b: number)
normal_annotation(id, A, F) :-
    id = ["annotation", A, F],
    token_at(A, B),
    type_name(_, B, C),
    token_left_paren(C, D),
    element_value_pair_list?(_, D, E),
    token_right_paren(E, F).

.decl element_value_pair_list(id: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(element_value_pair_list,
                         element_value_pair,
                         token_comma)

.decl element_value_pair_list?(id: id_list, a: number, b: number)
OPTIONAL(element_value_pair_list?, element_value_pair_list)

.decl element_value_pair(id: id, a: number, b: number)
element_value_pair(id, A, D) :-
    id = ["element_value_pair", A, D],
    identifier(_, _, A, B),
    token_equal_sign(B, C),
    element_value(_, C, D).

.decl element_value(id: id, a: number, b: number)

.decl element_value_array_initializer(ids: id_list, a: number, b: number)
element_value_array_initializer(ids, A, E) :-
    token_left_curly_bracket(A, B),
    element_value_list?(ids, B, C),
    token_comma?(C, D),
    token_right_curly_bracket(D, E).

.decl element_value_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(element_value_list, element_value, token_comma)

.decl element_value_list?(ids: id_list, a: number, b: number)
OPTIONAL(element_value_list?, element_value_list)

.decl marker_annotation(id: id, a: number, b: number)
marker_annotation(e, A, C) :-
    token_at(A, B),
    type_name(e, B, C).

// TODO SingleElementAnnotation

/**
 * Arrays
 * See ยง10 of https://docs.oracle.com/javase/specs/jls/se15/html/jls-19.html
 **************************************************************************/

.decl array_initializer(id: id, a: number, b: number)
array_initializer(["array_initializer_expression", A, E], A, E) :- 
    token_left_curly_bracket(A, B),
    variable_initializer_list?(_, B, C),
    token_comma?(C, D),
    token_right_curly_bracket(D, E).

.decl variable_initializer_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(variable_initializer_list, variable_initializer, token_comma)

.decl variable_initializer_list?(ids: id_list, a: number, b: number)
OPTIONAL(variable_initializer_list?, variable_initializer_list)

/**
 * Blocks and Statements
 * See ยง14 of https://docs.oracle.com/javase/specs/jls/se15/html/jls-19.html
 **************************************************************************/

.decl block(id: id, a: number, b: number)
parent_of_list(id, "statements", statements),
block(id, A, D) :-
    id = ["block", A, D],
    token_left_curly_bracket(A, B),
    block_statements?(statements, B, C),
    token_right_curly_bracket(C, D).

.decl block_statements?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(block_statements?, block_statement)

.decl block_statement(id: id, a: number, b: number)
block_statement(id, A, B) :- local_variable_declaration_statement(id, A, B).
// TODO: class declaration
block_statement(id, A, B) :- statement(id, A, B).

.decl local_variable_declaration_statement(id: id, a: number, b: number)
local_variable_declaration_statement(id, A, C) :-
    local_variable_declaration(id, A, B),
    token_semicolon(B, C).

.decl local_variable_declaration(id: id, a: number, b: number)
parent_of_list(id, "modifiers", mods),
parent_of(id, "type", type),
parent_of_list(id, "declarations", decls),
local_variable_declaration(id, A, D) :-
    id = ["local_variable_declaration", A, D],
    variable_modifiers?(mods, A, B),
    local_variable_type(type, B, C),
    variable_declarator_list(decls, C, D).

.decl local_variable_type(id: id, a: number, b: number)
local_variable_type(id, A, B) :- unann_type(id, A, B).
local_variable_type(["var_type", A, B], A, B) :- token_var(A, B).

.decl statement(id: id, a: number, b: number)
statement(id, A, B) :- statement_without_trailing_substatement(id, A, B).
statement(id, A, B) :- labeled_statement(id, A, B).
statement(id, A, B) :- if_then_statement(id, A, B).
statement(id, A, B) :- if_then_else_statement(id, A, B).
statement(id, A, B) :- while_statement(id, A, B).
statement(id, A, B) :- for_statement(id, A, B).

.decl statement_no_short_if(id: id, a: number, b: number)
statement_no_short_if(id, A, B) :-
    statement_without_trailing_substatement(id, A, B).
statement_no_short_if(id, A, B) :- labeled_statement_no_short_if(id, A, B).
statement_no_short_if(id, A, B) :- if_then_else_statement_no_short_if(id, A, B).
statement_no_short_if(id, A, B) :- while_statement_no_short_if(id, A, B).
statement_no_short_if(id, A, B) :- for_statement_no_short_if(id, A, B).

.decl statement_without_trailing_substatement(id: id, a: number, b: number)
statement_without_trailing_substatement(id, A, B) :- block(id, A, B).
statement_without_trailing_substatement(id, A, B) :- empty_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :-
    expression_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :- assert_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :- switch_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :- do_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :- break_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :-
    continue_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :- return_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :-
    synchronized_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :- throw_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :- try_statement(id, A, B).
statement_without_trailing_substatement(id, A, B) :- yield_statement(id, A, B).

.decl empty_statement(id: id, a: number, b: number)
empty_statement(["empty_statement", A, B], A, B) :- token_semicolon(A, B).

.decl labeled_statement(id: id, a: number, b: number)
labeled_statement(["labeled_statement", A, D], A, D) :-
    token_identifier(_, A, B),
    token_colon(B, C),
    statement(_, C, D).

.decl labeled_statement_no_short_if(id: id, a: number, b: number)
labeled_statement_no_short_if(["labeled_statement", A, D], A, D) :-
    token_identifier(_, A, B),
    token_colon(B, C),
    statement_no_short_if(_, C, D).

.decl expression_statement(id: id, a: number, b: number)
expression_statement(id, A, C) :-
    statement_expression(id, A, B),
    token_semicolon(B, C).

.decl statement_expression(id: id, a: number, b: number)
statement_expression(id, A, B) :- assignment(id, A, B).
statement_expression(id, A, B) :- pre_increment_expression(id, A, B).
statement_expression(id, A, B) :- pre_decrement_expression(id, A, B).
statement_expression(id, A, B) :- post_increment_expression(id, A, B).
statement_expression(id, A, B) :- post_decrement_expression(id, A, B).
statement_expression(id, A, B) :- method_invocation(id, A, B).
statement_expression(id, A, B) :- class_instance_creation_expression(id, A, B).

.decl if_then_statement(id: id, a: number, b: number)
parent_of(id, "condition", condition),
parent_of(id, "action", action),
parent_of(id, "else", nil),
if_then_statement(id, A, F) :-
    id = ["if_statement", A, F],
    token_if(A, B),
    token_left_paren(B, C),
    expression(condition, C, D),
    token_right_paren(D, E),
    statement(action, E, F).

.decl if_then_else_statement(id: id, a: number, b: number)
parent_of(id, "condition", condition),
parent_of(id, "action", action),
parent_of(id, "else", else),
if_then_else_statement(id, A, H) :-
    id = ["if_statement", A, H],
    token_if(A, B),
    token_left_paren(B, C),
    expression(condition, C, D),
    token_right_paren(D, E),
    statement_no_short_if(action, E, F),
    token_else(F, G),
    statement(else, G, H).

.decl if_then_else_statement_no_short_if(id: id, a: number, b: number)
parent_of(id, "condition", condition),
parent_of(id, "action", action),
parent_of(id, "else", else),
if_then_else_statement_no_short_if(id, A, H) :-
    id = ["if_statement", A, H],
    token_if(A, B),
    token_left_paren(B, C),
    expression(condition, C, D),
    token_right_paren(D, E),
    statement_no_short_if(action, E, F),
    token_else(F, G),
    statement_no_short_if(else, G, H).

.decl assert_statement(id: id, a: number, b: number)
assert_statement(["assert_statement", A, D], A, D) :-
    token_assert(A, B),
    expression(_, B, C),
    token_semicolon(C, D).
assert_statement(["assert_statement", A, F], A, F) :-
    token_assert(A, B),
    expression(_, B, C),
    token_colon(C, D),
    expression(_, D, E),
    token_semicolon(E, F).

.decl switch_statement(id: id, a: number, b: number)
switch_statement(["switch_statement", A, F], A, F) :-
    token_switch(A, B),
    token_left_paren(B, C),
    expression(_, C, D),
    token_right_paren(D, E),
    switch_block(_, E, F).

.decl switch_block(ids: id_list, a: number, b: number)
switch_block([rule, rules], A, E) :-
    token_left_curly_bracket(A, B),
    switch_rule(rule, B, C),
    switch_rules?(rules, C, D),
    token_right_curly_bracket(D, E).

.decl switch_rules?(ids: id_list, a: number, b: number)
ZERO_OR_MORE(switch_rules?, switch_rule)

.decl switch_rule(id: id, a: number, b: number)

.decl switch_block_statement_group(a: number, b: number)

.decl switch_label(id: id, a: number, b: number)

.decl case_constants(ids: id_list, a: number, b: number)
case_constants([x, nil], A, B) :- case_constant(x, A, B).
case_constants([x, xs], A, D) :-
    case_constant(x, A, B),
    token_comma(B, C),
    case_constants(xs, C, D).

.decl case_constant(id: id, a: number, b: number)
case_constant(id, A, B) :- conditional_expression(id, A, B).

.decl while_statement(id: id, a: number, b: number)
parent_of(id, "condition", condition),
parent_of(id, "action", action),
while_statement(id, A, F) :-
    id = ["while_statement", A, F],
    token_while(A, B),
    token_left_paren(B, C),
    expression(condition, C, D),
    token_right_paren(D, E),
    statement(action, E, F).

.decl while_statement_no_short_if(id: id, a: number, b: number)
parent_of(id, "condition", condition),
parent_of(id, "action", action),
while_statement_no_short_if(id, A, F) :-
    id = ["while_statement", A, F],
    token_while(A, B),
    token_left_paren(B, C),
    expression(condition, C, D),
    token_right_paren(D, E),
    statement_no_short_if(action, E, F).

.decl do_statement(id: id, a: number, b: number)
do_statement(["do_statement", A, H], A, H) :-
    token_do(A, B),
    statement(_, B, C),
    token_while(C, D),
    token_left_paren(D, E),
    expression(_, E, F),
    token_right_paren(F, G),
    token_semicolon(G, H).

.decl for_statement(id: id, a: number, b: number)
for_statement(id, A, B) :- for_statement_no_short_if(id, A, B).
for_statement(id, A, B) :- enhanced_for_statement(id, A, B).

.decl for_statement_no_short_if(id: id, a: number, b: number)
for_statement_no_short_if(id, A, B) :-
    basic_for_statement_no_short_if(id, A, B).
for_statement_no_short_if(id, A, B) :-
    enhanced_for_statement_no_short_if(id, A, B).

.decl basic_for_statement(id: id, a: number, b: number)
parent_of(id, "init", init),
parent_of(id, "condition", expr),
parent_of(id, "update", update),
parent_of(id, "action", stmt),
basic_for_statement(id, A, J) :-
    id = ["for_statement", A, J],
    token_for(A, B),
    token_left_paren(B, C),
    for_init?(init, C, D),
    token_semicolon(D, E),
    expression?(expr, E, F),
    token_semicolon(F, G),
    for_update?(update, G, H),
    token_right_paren(H, I),
    statement(stmt, I, J).

.decl basic_for_statement_no_short_if(id: id, a: number, b: number)
parent_of(id, "init", init),
parent_of(id, "condition", condition),
parent_of(id, "update", update),
parent_of(id, "action", stmt),
basic_for_statement(id, A, J) :-
    id = ["for_statement", A, J],
    token_for(A, B),
    token_left_paren(B, C),
    for_init?(init, C, D),
    token_semicolon(D, E),
    expression?(condition, E, F),
    token_semicolon(F, G),
    for_update?(update, G, H),
    token_right_paren(H, I),
    statement_no_short_if(stmt, I, J).

.decl for_init(id: id, a: number, b: number)
for_init(id, A, B) :-
    statement_expression_list(id, _, A, B).
for_init(id, A, B) :-
    local_variable_declaration(id, A, B).

.decl for_init?(id: id, a: number, b: number)
OPTIONAL(for_init?, for_init)

.decl for_update(id: id, a: number, b: number)
for_update(id, A, B) :- statement_expression_list(id, _, A, B).

.decl for_update?(id: id, a: number, b: number)
for_update?(nil, A, A) :- any_position(A).
for_update?(id, A, A) :- for_update(id, A, B).

.decl statement_expression_list(id: id, ids: id_list, a: number, b: number)
statement_expression_list(id, [x, nil], A, B) :-
    id = ["statement_expression_list", A, B],
    statement_expression(x, A, B).
statement_expression_list(id, [x, xs], A, D) :-
    id = ["statement_expression_list", A, D],
    statement_expression(x, A, B),
    token_comma(B, C),
    statement_expression_list(_, xs, C, D).
// FIXME

.decl enhanced_for_statement(id: id, a: number, b: number)

.decl enhanced_for_statement_no_short_if(id: id, a: number, b: number)

.decl break_statement(id: id, a: number, b: number)
break_statement(["break_statement", A, D], A, D) :-
    token_break(A, B),
    identifier?(id, B, C),
    token_semicolon(C, D).

.decl yield_statement(id: id, a: number, b: number)
yield_statement(["yield_statement", A, D], A, D) :-
    token_yield(A, B),
    expression(_, B, C),
    token_semicolon(C, D).

.decl continue_statement(id: id, a: number, b: number)
continue_statement(["continue_statement", A, D], A, D) :-
    token_continue(A, B),
    identifier?(_, B, C),
    token_semicolon(C, D).

.decl return_statement(id: id, a: number, b: number)
return_statement(["return_statement", A, D], A, D) :-
    token_return(A, B),
    expression?(_, B, C),
    token_semicolon(C, D).

.decl throw_statement(id: id, a: number, b: number)
throw_statement(["throw_statement", A, D], A, D) :-
    token_throw(A, B),
    expression(_, B, C),
    token_semicolon(C, D).

.decl synchronized_statement(id: id, a: number, b: number)

.decl try_statement(id: id, a: number, b: number)

.decl catches(ids: id_list, a: number, b: number)
ONE_OR_MORE(catches, catch_clause)

.decl catch_clause(id: id, a: number, b: number)

.decl catch_formal_parameter(id: id, a: number, b: number)
catch_formal_parameter(nil, A, D) :-
    variable_modifiers?(_, A, B),
    catch_type(_, B, C),
    variable_declarator_id(_, C, D).

.decl catch_type(ids: id_list, a: number, b: number)
catch_type([x, nil], A, B) :- unann_class_type(x, A, B).
catch_type([x, xs], A, C) :-
    unann_class_type(x, A, B),
    catch_type_tail(xs, B, C).

.decl catch_type_tail(ids: id_list, a: number, b: number)
catch_type_tail(nil, A, A) :- any_position(A).
catch_type_tail([x, xs], A, D) :-
    token_vertical_bar(A, B),
    class_type(x, B, C),
    catch_type_tail(xs, C, D).

.decl finally(id: id, a: number, b: number)
finally(b, A, C) :-
    token_finally(A, B),
    block(b, B, C).

// TODO TryWithResourcesStatement

// TODO ResourceSpecification
.decl resource_specification(ids: id_list, a: number, b: number)
resource_specification(e, A, E) :-
    token_left_paren(A, B),
    resource_list(e, B, C),
    token_semicolon?(C, D),
    token_right_paren(D, E).

.decl resource_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(resource_list, resource, token_semicolon)

.decl resource(id: id, a: number, b: number)

.decl variable_access(id: id, a: number, b: number)

/**
 * Expressions
 * See ยง15 of https://docs.oracle.com/javase/specs/jls/se15/html/jls-19.html
 **************************************************************************/

.decl primary(id: id, a: number, b: number)
primary(id, A, B) :- primary_no_new_array(id, A, B).
primary(id, A, B) :- array_creation_expression(id, A, B).

.decl primary_no_new_array(id: id, a: number, b: number)
primary_no_new_array(id, A, B) :- literal(id, A, B).
primary_no_new_array(id, A, B) :- class_literal(id, A, B).
primary_no_new_array(["this_expression", A, B], A, B) :- token_this(A, B).
primary_no_new_array(id, A, D) :-
    token_left_paren(A, B),
    expression(id, B, C),
    token_right_paren(C, D).
primary_no_new_array(id, A, B) :- class_instance_creation_expression(id, A, B).
primary_no_new_array(id, A, B) :- field_access(id, A, B).
primary_no_new_array(id, A, B) :- array_access(id, A, B).
primary_no_new_array(id, A, B) :- method_invocation(id, A, B).
primary_no_new_array(id, A, B) :- method_reference(id, A, B).

.decl class_literal(id: id, a: number, b: number)

.decl class_instance_creation_expression(id: id, a: number, b: number)
class_instance_creation_expression(id, A, B) :-
    unqualified_class_instance_creation_expression(id, A, B).
// TODO ...

.decl unqualified_class_instance_creation_expression(id: id, a: number, b: number)
unqualified_class_instance_creation_expression(id, A, H) :-
    id = ["unqualified_class_instance_creation_expression", A, H],
    token_new(A, B),
    type_arguments?(_, B, C),
    class_or_interface_type_to_instantiate(_, C, D),
    token_left_paren(D, E),
    argument_list?(_, E, F),
    token_right_paren(F, G),
    class_body?(_, G, H).

.decl class_or_interface_type_to_instantiate(id: id, a: number, b: number)
class_or_interface_type_to_instantiate(nil, A, D) :-
    annotations?(_, A, B),
    identifier(_, _, B, C),
    // TODO ...
    type_arguments_or_diamond(_, C, D).

.decl type_arguments_or_diamond(ids: id_list, a: number, b: number)
type_arguments_or_diamond(nil, A, C) :-
    token_less_than(A, B),
    token_greater_than(B, C).
type_arguments_or_diamond(ids, A, B) :- type_arguments(ids, A, B).

.decl field_access(id: id, a: number, b: number)
field_access(nil, A, D) :-
    primary(_, A, B),
    token_dot(B, C),
    identifier(_, _, C, D).
// TODO ...

.decl array_access(id: id, a: number, b: number)
array_access(nil, A, E) :-
    expression_name(_, A, B),
    token_left_square_bracket(B, C),
    expression(_, C, D),
    token_right_square_bracket(D, E).
array_access(nil, A, E) :-
    primary_no_new_array(_, A, B),
    token_left_square_bracket(B, C),
    expression(_, C, D),
    token_right_square_bracket(D, E).

/* The rule including type_name is omitted since its derivations coincides with
   those of expression_name */
.decl method_invocation(id: id, a: number, b: number)

parent_of(id, "subject", nil),
parent_of(id, "type_arguments", nil),
parent_of(id, "method", method),
parent_of_list(id, "arguments", args),
method_invocation(id, A, E) :-
    id = ["method_invocation", A, E],
    method_name(method, A, B),
    token_left_paren(B, C),
    argument_list?(args, C, D),
    token_right_paren(D, E).

parent_of(id, "subject", subject),
parent_of_list(id, "type_arguments", typeargs),
parent_of(id, "method", method),
parent_of_list(id, "arguments", args),
method_invocation(id, A, H) :-
    id = ["method_invocation", A, H],
    expression_name(subject, A, B),
    token_dot(B, C),
    type_arguments?(typeargs, C, D),
    identifier(method, _, D, E),
    token_left_paren(E, F),
    argument_list?(args, F, G),
    token_right_paren(G, H).

parent_of(id, "subject", subject),
parent_of_list(id, "type_arguments", typeargs),
parent_of(id, "method", method),
parent_of_list(id, "arguments", args),
method_invocation(id, A, H) :-
    id = ["method_invocation", A, H],
    primary(subject, A, B),
    token_dot(B, C),
    type_arguments?(typeargs, C, D),
    identifier(method, _, D, E),
    token_left_paren(E, F),
    argument_list?(args, F, G),
    token_right_paren(G, H).

parent_of(id, "subject", nil),
parent_of_list(id, "type_arguments", typeargs),
parent_of(id, "method", method),
parent_of_list(id, "arguments", args),
method_invocation(id, A, H) :-
    id = ["method_invocation", A, H],
    token_super(A, B),
    token_dot(B, C),
    type_arguments?(typeargs, C, D),
    identifier(method, _, D, E),
    token_left_paren(E, F),
    argument_list?(args, F, G),
    token_right_paren(G, H).

parent_of(id, "subject", subject),
parent_of_list(id, "type_arguments", typeargs),
parent_of(id, "method", method),
parent_of_list(id, "arguments", args),
method_invocation(id, A, J) :-
    id = ["method_invocation", A, J],
    type_name(subject, A, B),
    token_dot(B, C),
    token_super(C, D),
    token_dot(D, E),
    type_arguments?(typeargs, E, F),
    identifier(method, _, F, G),
    token_left_paren(G, H),
    argument_list?(args, H, I),
    token_right_paren(I, J).

.decl argument_list(ids: id_list, a: number, b: number)
ONE_OR_MORE_SEPARATED_BY(argument_list, expression, token_comma)

.decl argument_list?(ids: id_list, a: number, b: number)
OPTIONAL(argument_list?, argument_list)

.decl method_reference(id: id, a: number, b: number)
method_reference(["method_reference", A, F], A, F) :-
    expression_name(_, A, B),
    token_colon(B, C),
    token_colon(C, D),
    type_arguments?(_, D, E),
    identifier(_, _, E, F).
method_reference(["method_reference", A, F], A, F) :-
    primary(_, A, B),
    token_colon(B, C),
    token_colon(C, D),
    type_arguments?(_, D, E),
    identifier(_, _, E, F).
method_reference(["method_reference", A, F], A, F) :-
    reference_type(_, A, B),
    token_colon(B, C),
    token_colon(C, D),
    type_arguments?(_, D, E),
    identifier(_, _, E, F).
// TODO ...

.decl array_creation_expression(id: id, a: number, b: number)
array_creation_expression(id, A, E) :-
    id = ["array_creation_expression", A, E],
    token_new(A, B),
    primitive_type(_, B, C),
    dim_exprs(_, C, D),
    dims?(_, D, E).
array_creation_expression(id, A, E) :-
    id = ["array_creation_expression", A, E],
    token_new(A, B),
    class_or_interface_type(_, B, C),
    dim_exprs(_, C, D),
    dims?(_, D, E).
array_creation_expression(id, A, E) :-
    id = ["array_creation_expression", A, E],
    token_new(A, B),
    primitive_type(_, B, C),
    dims(_, C, D),
    array_initializer(_, D, E).
array_creation_expression(id, A, E) :-
    id = ["array_creation_expression", A, E],
    token_new(A, B),
    class_or_interface_type(_, B, C),
    dims(_, C, D),
    array_initializer(_, D, E).

.decl dim_exprs(ids: id_list, a: number, b: number)
ONE_OR_MORE(dim_exprs, dim_expr)

.decl dim_expr(id: id, a: number, b: number)
parent_of_list(id, "annotations", annotations),
parent_of(id, "expression", expr),
dim_expr(id, A, E) :-
    id = ["dim_expr", A, E],
    annotations?(annotations, A, B),
    token_left_square_bracket(B, C),
    expression(expr, C, D),
    token_right_square_bracket(D, E).

.decl expression(id: id, a: number, b: number)
expression(id, A, B) :- lambda_expression(id, A, B).
expression(id, A, B) :- assignment_expression(id, A, B).

.decl expression?(id: id, a: number, b: number)
OPTIONAL(expression?, expression)

.decl lambda_expression(id: id, a: number, b: number)
parent_of(id, "parameters", parameters),
parent_of(id, "body", body),
lambda_expression(id, A, D) :-
    id = ["lambda_expression", A, D],
    lambda_parameters(parameters, A, B),
    token_arrow(B, C),
    lambda_body(body, C, D).

.decl lambda_parameters(id: id, a: number, b: number)
lambda_parameters(nil, A, B) :-
    identifier(_, _, A, B).
lambda_parameters(nil, A, D) :-
    token_left_paren(A, B),
    lambda_parameter_list_first_option(_, B, C),
    token_right_paren(C, D).
lambda_parameters(nil, A, D) :-
    token_left_paren(A, B),
    lambda_parameter_list_second_option(_, B, C),
    token_right_paren(C, D).

/* Note: Rule lambda_parameter_list is handled by the two following rules */
.decl lambda_parameter_list_first_option(ids: id_list, a: number, b: number)
lambda_parameter_list_first_option([x, nil], A, B) :- identifier(x, _, A, B).
lambda_parameter_list_first_option([x, xs], A, D) :-
    identifier(x, _, A, B),
    token_comma(B, C),
    lambda_parameter_list_first_option(xs, C, D).
.decl lambda_parameter_list_second_option(ids: id_list, a: number, b: number)
lambda_parameter_list_second_option([x, nil], A, B) :-
    lambda_parameter(x, A, B).
lambda_parameter_list_second_option([x, xs], A, D) :-
    lambda_parameter(x, A, B),
    token_comma(B, C),
    lambda_parameter_list_second_option(xs, C, D).

.decl lambda_parameter(id: id, a: number, b: number)
lambda_parameter(nil, A, D) :-
    variable_modifiers?(_, A, B),
    lambda_parameter_type(_, B, C),
    variable_declarator_id(_, C, D).
lambda_parameter(nil, A, B) :-
    variable_arity_parameter(_, A, B).

.decl lambda_parameter_type(id: id, a: number, b: number)
lambda_parameter_type(t, A, B) :- unann_type(t, A, B).
lambda_parameter_type(["var_type", A, B], A, B) :- token_var(A, B).

.decl lambda_body(id: id, a: number, b: number)

.decl assignment_expression(id: id, a: number, b: number)
assignment_expression(id, A, B) :- conditional_expression(id, A, B).
assignment_expression(id, A, B) :- assignment(id, A, B).

.decl assignment(id: id, a: number, b: number)
assignment(nil, A, D) :-
    left_hand_side(_, A, B),
    assignment_operator(_, B, C),
    expression(_, C, D).

.decl left_hand_side(id: id, a: number, b: number)
left_hand_side(id, A, B) :-
    expression_name(id, A, B).
left_hand_side(id, A, B) :-
    field_access(id, A, B).
left_hand_side(id, A, B) :-
    array_access(id, A, B).

.decl assignment_operator(s: symbol, a: number, b: number)
assignment_operator(s, A, A + 1) :- token(s, A), s = "=".
assignment_operator(s, A, A + 1) :- token(s, A), s = "*=".
assignment_operator(s, A, A + 1) :- token(s, A), s = "/=".
assignment_operator(s, A, A + 1) :- token(s, A), s = "%=".
assignment_operator(s, A, A + 1) :- token(s, A), s = "+=".
assignment_operator(s, A, A + 1) :- token(s, A), s = "-=".
assignment_operator(s, A, A + 1) :- token(s, A), s = "<<=".
assignment_operator(s, A, A + 1) :- token(s, A), s = ">>=".
assignment_operator(s, A, A + 1) :- token(s, A), s = ">>>=".
assignment_operator(s, A, A + 1) :- token(s, A), s = "&=".
assignment_operator(s, A, A + 1) :- token(s, A), s = "^=".
assignment_operator(s, A, A + 1) :- token(s, A), s = "|=".

.decl conditional_expression(id: id, a: number, b: number)
conditional_expression(id, A, B) :- conditional_or_expression(id, A, B).
conditional_expression(nil, A, F) :-
    conditional_or_expression(_, A, B),
    token_question_mark(B, C),
    expression(_, C, D),
    token_colon(D, E),
    conditional_expression(_, E, F).
conditional_expression(nil, A, F) :-
    conditional_or_expression(_, A, B),
    token_question_mark(B, C),
    expression(_, C, D),
    token_colon(D, E),
    lambda_expression(_, E, F).

.decl conditional_or_expression(id: id, a: number, b: number)
conditional_or_expression(id, A, B) :- conditional_and_expression(id, A, B).

INFIX("or_expression",
      or_expression,
      conditional_or_expression,
      conditional_and_expression,
      "||")

.decl conditional_and_expression(id: id, a: number, b: number)
conditional_and_expression(id, A, B) :- inclusive_or_expression(id, A, B).
conditional_and_expression(id, A, B) :-
    conditional_and_expression_impl(id, A, B).

INFIX("conditional_and_expression",
      conditional_and_expression_impl,
      conditional_and_expression,
      inclusive_or_expression,
      "&&")

.decl inclusive_or_expression(id: id, a: number, b: number)
inclusive_or_expression(id, A, B) :- exclusive_or_expression(id, A, B).
inclusive_or_expression(id, A, B) :-
    bitwise_inclusive_or_expression(id, A, B).

INFIX("bitwise_inclusive_or_expression",
      bitwise_inclusive_or_expression,
      inclusive_or_expression,
      exclusive_or_expression,
      "|")

.decl exclusive_or_expression(id: id, a: number, b: number)
exclusive_or_expression(id, A, B) :-
    and_expression(id, A, B).
exclusive_or_expression(id, A, B) :-
    bitwise_exclusive_or_expression(id, A, B).

INFIX("bitwise_exclusive_or_expression",
      bitwise_exclusive_or_expression,
      exclusive_or_expression,
      and_expression,
      "^")

.decl and_expression(id: id, a: number, b: number)
and_expression(id, A, B) :- equality_expression(id, A, B).
and_expression(id, A, B) :- and_expression_impl(id, A, B).

INFIX("and_expression",
      and_expression_impl,
      and_expression,
      equality_expression,
      "&")

.decl equality_expression(id: id, a: number, b: number)
equality_expression(id, A, B) :- relational_expression(id, A, B).
equality_expression(id, A, B) :- equals_expression(id, A, B).
equality_expression(id, A, B) :- not_equals_expression(id, A, B).

INFIX("equals_expression",
      equals_expression,
      equality_expression,
      relational_expression,
      "==")
INFIX("not_equals_expression",
      not_equals_expression,
      equality_expression,
      relational_expression,
      "!=")

.decl relational_expression(id: id, a: number, b: number)
relational_expression(e, A, B) :- shift_expression(e, A, B).

.decl shift_expression(id: id, a: number, b: number)
shift_expression(id, A, B) :- additive_expression(id, A, B).
shift_expression(id, A, B) :- shift_left_expression(id, A, B).
shift_expression(id, A, B) :- shift_right_expression(id, A, B).
shift_expression(id, A, B) :- shift_right_unsigned_expression(id, A, B).

INFIX("shift_left_expression",
      shift_left_expression,
      shift_expression,
      additive_expression,
      "<<")
INFIX("shift_right_expression",
      shift_right_expression,
      shift_expression,
      additive_expression,
      ">>")
INFIX("shift_right_unsigned_expression",
      shift_right_unsigned_expression,
      shift_expression,
      additive_expression,
      ">>>")

.decl additive_expression(id: id, a: number, b: number)
additive_expression(id, A, B) :- multiplicative_expression(id, A, B).
additive_expression(id, A, B) :- addition_expression(id, A, B).
additive_expression(id, A, B) :- subtraction_expression(id, A, B).

INFIX("addition_expression",
      addition_expression,
      additive_expression,
      multiplicative_expression,
      "+")
INFIX("subtraction_expression",
      subtraction_expression,
      additive_expression,
      multiplicative_expression,
      "-")

.decl multiplicative_expression(id: id, a: number, b: number)
multiplicative_expression(id, A, B) :- unary_expression(id, A, B).
multiplicative_expression(id, A, B) :-
    multiplication_expression(id, A, B).
multiplicative_expression(id, A, B) :- division_expression(id, A, B).
multiplicative_expression(id, A, B) :- modulo_expression(id, A, B).

INFIX("multiplication_expression",
      multiplication_expression,
      multiplicative_expression,
      unary_expression,
      "*")
INFIX("division_expression",
      division_expression,
      multiplicative_expression,
      unary_expression,
      "/")
INFIX("modulo_expression",
      modulo_expression,
      multiplicative_expression,
      unary_expression,
      "%")

.decl unary_expression(id: id, a: number, b: number)
unary_expression(e, A, B) :- pre_increment_expression(e, A, B).
unary_expression(e, A, B) :- pre_decrement_expression(e, A, B).
PREFIX("unary_plus_expression", unary_expression, unary_expression, "+")
PREFIX("unary_minus_expression", unary_expression, unary_expression, "-")
unary_expression(e, A, B) :- unary_expression_not_plus_minus(e, A, B).

.decl pre_increment_expression(id: id, a: number, b: number)
PREFIX("pre_increment_expression",
       pre_increment_expression,
       unary_expression,
       "++")

.decl pre_decrement_expression(id: id, a: number, b: number)
PREFIX("pre_decrement_expression",
       pre_decrement_expression,
       unary_expression,
       "--")

.decl unary_expression_not_plus_minus(id: id, a: number, b: number)
unary_expression_not_plus_minus(e, A, B) :- postfix_expression(e, A, B).

PREFIX("bitwise_not_expression",
       unary_expression_not_plus_minus,
       unary_expression,
       "~")
PREFIX("not_expression",
       unary_expression_not_plus_minus,
       unary_expression,
       "!")

unary_expression_not_plus_minus(e, A, B) :- cast_expression(e, A, B).
unary_expression_not_plus_minus(e, A, B) :- switch_expression(e, A, B).

.decl postfix_expression(id: id, a: number, b: number)
postfix_expression(e, A, B) :- primary(e, A, B).
postfix_expression(id, A, B) :- expression_name(id, A, B).
postfix_expression(e, A, B) :- post_increment_expression(e, A, B).
postfix_expression(e, A, B) :- post_decrement_expression(e, A, B).

.decl post_increment_expression(id: id, a: number, b: number)

POSTFIX("post_increment_expression",
        post_increment_expression,
        postfix_expression,
        "++")

.decl post_decrement_expression(id: id, a: number, b: number)

POSTFIX("post_decrement_expression",
        post_decrement_expression,
        postfix_expression,
        "--")

.decl cast_expression(id: id, a: number, b: number)
cast_expression(["cast_expression", A, E], A, E) :-
    token_left_paren(A, B),
    primitive_type(_, B, C),
    token_right_paren(C, D),
    unary_expression(_, D, E).
cast_expression(["cast_expression", A, F], A, F) :-
    token_left_paren(A, B),
    reference_type(_, B, C),
    additional_bounds?(_, C, D),
    token_right_paren(D, E),
    unary_expression_not_plus_minus(_, E, F).
cast_expression(["cast_expression", A, F], A, F) :-
    token_left_paren(A, B),
    reference_type(_, B, C),
    additional_bounds?(_, C, D),
    token_right_paren(D, E),
    lambda_expression(_, E, F).

.decl switch_expression(id: id, a: number, b: number)
switch_expression(["switch_expression", A, F], A, F) :-
    token_switch(A, B),
    token_left_paren(B, C),
    expression(_, C, D),
    token_right_paren(D, E),
    switch_block(_, E, F).

.decl constant_expression(id: id, a: number, b: number)
constant_expression(e, A, B) :- expression(e, A, B).

/**
 * Output
 **************************************************************************/

.decl root(id: id)
root(id) :-
    compilation_unit(id, 0, B),
    num_tokens(B).

.decl parent_of(parent: id, name: symbol, child: id)
.decl parent_of_list(parent: id, name: symbol, children: id_list)

.output parent_of
.output parent_of_list
.output root
