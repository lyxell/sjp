.type Expression = Number {n: number}
                 | Identifier {id: symbol}
                 | Eq {e1: Expression, e2: Expression}
                 | Add {e1: Expression, e2: Expression}
                 | Sub {e1: Expression, e2: Expression}
                 | Assign {e1: Expression, e2: Expression}
                 | LessThan {e1: Expression, e2: Expression}

.type Statement = If {cond: Expression, then: Statement}
                | While {cond: Expression, then: Statement}
                | Block {s: StatementList }
                | Return {e: Expression }
                | Empty {}

.type StatementList = [
    head: Statement,
    tail: StatementList
]

.decl token(s: symbol, c: symbol, n: number)
.decl statement(s: Statement, n: number, l: number)
.decl one_or_more_statements(s: StatementList, n: number, l: number)
.decl expr(e: Expression, n: number, l: number)
.decl expr1(e: Expression, n: number, l: number)
.decl bin_op(e1: Expression, e2: Expression, a: number, b: number, t: symbol)
.decl par_expr(e: Expression, n: number, l: number)
.decl root(s: Statement)

.input token

/**
 * Blocks/statements
 */

one_or_more_statements([e, nil], A, B) :-
    statement(e, A, B).

one_or_more_statements([e, tail], A, C) :-
    statement(e, A, B), B >= A,
    one_or_more_statements(tail, B + 1, C), C >= B + 1.

// empty block statement
statement($Block(nil), A, A + 1) :-
    token("TOKEN_LEFT_CURLY", _, A),
    token("TOKEN_RIGHT_CURLY", _, A + 1).

// block statement
statement($Block(s), A, B + 1) :-
    token("TOKEN_LEFT_CURLY", _, A),
    one_or_more_statements(s, A + 1, B), B >= A + 1,
    token("TOKEN_RIGHT_CURLY", _, B + 1).

// if statement
statement($If(cond, then), A, C) :-
    token("TOKEN_IF", _, A),
    par_expr(cond, A + 1, B),   B >= A + 1,
    statement(then, B + 1, C),  C >= B + 1.

// while statement
statement($While(cond, do), A, C) :-
    token("TOKEN_WHILE", _, A),
    par_expr(cond, A + 1, B), B >= A + 1,
    statement(do, B + 1, C),  C >= B + 1.

// return statement
statement($Return(e), A, B) :-
    token("TOKEN_RETURN", _, A),
    expr(e, A + 1, B), B >= A + 1.

/**
 * Expressions
 */

// parenthesized expression
par_expr(e, A, B + 1) :-
    token("TOKEN_LEFT_PAREN", _,  A),
    expr(e, A + 1, B), B >= A + 1,
    token("TOKEN_RIGHT_PAREN", _, B + 1).

bin_op(e1, e2, A, C, T) :-
    expr(e1, A, B), B >= A,
    token(T, _, B + 1),
    expr1(e2, B + 2, C), C >= B + 2.
expr($Eq(e1, e2), A, B) :- bin_op(e1, e2, A, B, "TOKEN_EQUALS").
expr($Add(e1, e2), A, B) :- bin_op(e1, e2, A, B, "TOKEN_PLUS").
expr($Sub(e1, e2), A, B) :- bin_op(e1, e2, A, B, "TOKEN_MINUS").
expr($LessThan(e1, e2), A, B) :- bin_op(e1, e2, A, B, "TOKEN_LESS_THAN").

expr(e, A, B) :- expr1(e, A, B).

// identifier
expr1($Identifier(id), A, A) :-
    token("TOKEN_IDENTIFIER", id, A).

// number
expr1($Number(to_number(s)), A, A) :-
    token("TOKEN_NUMBER", s, A).

/**
 * Root
 */

root(s) :- statement(s, 1, N), token("TOKEN_EOF", _, N+1).

.output par_expr
.output statement
.output expr
.output root
