.type Expression = Number {}
                 | Identifier {}
                 | Eq {e_1 : Expression, e_2 :Expression}
                 | Add {e_1 : Expression, e_2 : Expression}

.type Statement = If { cond : Expression, then: Statement }
                | While { cond : Expression, then: Statement }
                | Empty {}
                | Block { s: StatementList }

.type StatementList = [
    head : Statement,
    tail : StatementList
]

.decl token(s: symbol, n: number)
.decl statement(s: Statement, n: number, l: number)
.decl one_or_more_statements(s: StatementList, n: number, l: number)
.decl expr(e: Expression, n: number, l: number)
.decl par_expr(e: Expression, n: number, l: number)

.input token

/**
 * Expressions
 */


// parenthesized expression
par_expr(e, A, B + 1) :-
    token("TOKEN_LEFT_PAREN",  A),
    expr(e, A + 1, B), B >= A + 1,
    token("TOKEN_RIGHT_PAREN", B + 1).

// identifier
expr($Identifier(), A, A) :-
    token("TOKEN_IDENTIFIER", A).

// number
expr($Number(), A, A) :-
    token("TOKEN_NUMBER", A).

// e1 == e2
expr($Eq(e1, e2), A, C) :-
    expr(e1, A, B), B >= A,
    token("TOKEN_EQUALS", B + 1),
    expr(e2, B + 2, C), C >= B + 2.

// e1 + e2
expr($Add(e1, e2), A, C) :-
    expr(e1, A, B), B >= A,
    token("TOKEN_PLUS", B + 1),
    expr(e2, B + 2, C), C >= B + 2.

/**
 * Statements
 */

one_or_more_statements([e, nil], A, B) :-
    statement(e, A, B).

one_or_more_statements([e, tail], A, C) :-
    statement(e, A, B), B >= A,
    one_or_more_statements(tail, B + 1, C), C >= B + 1.

// empty block statement
statement($Block(nil), A, A + 1) :-
    token("TOKEN_LEFT_CURLY", A),
    token("TOKEN_RIGHT_CURLY", A + 1).

// block statement
statement($Block(s), A, B + 1) :-
    token("TOKEN_LEFT_CURLY", A),
    one_or_more_statements(s, A + 1, B), B >= A + 1,
    token("TOKEN_RIGHT_CURLY", B + 1).

// if statement
statement($If(cond, then), A, C) :-
    token("TOKEN_IF", A),
    par_expr(cond, A + 1, B),   B >= A + 1,
    statement(then, B + 1, C),  C >= B + 1.

// while statement
statement($While(cond, do), A, C) :-
    token("TOKEN_WHILE", A),
    par_expr(cond, A + 1, B), B >= A + 1,
    statement(do, B + 1, C),  C >= B + 1.

.output par_expr
.output statement
.output expr
