/* Generated by re2c 2.0.3 on Mon Apr 19 17:15:50 2021 */
/**
 * MIT License
 *
 * Copyright (c) 2021 Anton Lyxell
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <string>
#include <fstream>
#include <iostream>
#include <streambuf>
#include <cassert>
#include <souffle/SouffleInterface.h>
#include <tuple>
#include "sjp.hpp"

namespace sjp {

    parser::parser() {
        program = souffle::ProgramFactory::newInstance("parser");
        assert(program != NULL);
    }

    void parser::add_file(const char* filename) {
        std::ifstream t(filename);
        add_string(filename,
            std::string((std::istreambuf_iterator<char>(t)),
            std::istreambuf_iterator<char>()).c_str());
    }

    void parser::add_string(const char* filename, const char* content) {
        auto [tokens, tl, i32_value, token_type] = lex_string(content);
        token_limits.emplace(filename, tl);
        souffle::Relation* relation = program->getRelation("token");
        assert(relation != NULL);
        for (int32_t i = 0; i < tokens.size(); i++) {
            souffle::tuple tuple(relation);
            tuple << tokens[i] << i;
            relation->insert(tuple);
        }
        relation = program->getRelation("num_tokens");
        assert(relation != NULL);
        souffle::tuple tuple(relation);
        tuple << (int32_t) tokens.size();
        relation->insert(tuple);
        relation = program->getRelation("token_type");
        assert(relation != NULL);
        for (auto& [id, type] : token_type) {
            souffle::tuple tuple(relation);
            tuple << (int32_t) id << type;
            relation->insert(tuple);
        }
    }

    void parser::parse() {
        program->run();
        program->printAll();
    }

    std::vector<std::tuple<std::string,int,int>>
    parser::get_tuples(const char* filename) {
        std::vector<std::tuple<std::string,int,int>> result;
        auto& limits = token_limits[filename];
        souffle::Relation* relation = program->getRelation("in_tree");
        for (auto &output : *relation) {
            int record_reference;
            output >> record_reference;
            auto record = program->getRecordTable().unpack(record_reference, 3);
            if (!record) continue;
            int symbol_reference = *record;
            
            result.emplace_back(
                program->getSymbolTable().decode(symbol_reference),
                limits[record[1]].first,
                limits[record[2]-1].second);
        }
        return result;
    }

    size_t parser::num_asts() {
        souffle::Relation* relation = program->getRelation("root");
        assert(relation != NULL);
        return relation->size();
        return 0;
    }

    parser::~parser() {
        delete program;
    }

    /**
     * Expects a null-terminated string.
     */
    std::tuple<std::vector<std::string>,
               std::unordered_map<size_t, std::pair<size_t, size_t>>,
               std::unordered_map<size_t,int32_t>,
               std::unordered_map<size_t, std::string>>
    lex_string(const char *content) {
        std::vector<std::string> tokens;
        std::unordered_map<size_t, std::pair<size_t, size_t>> token_limits;
        std::unordered_map<size_t, int32_t> i32_value;
        std::unordered_map<size_t, std::string> token_type;
        const char* YYCURSOR = content;
        while (1) {
            const char *YYSTART = YYCURSOR;
            
{
	char yych;
	yych = *YYCURSOR;
	switch (yych) {
	case '\t' ... '\v':
	case '\r':
	case ' ': goto yy4;
	case '!': goto yy6;
	case '%':
	case '*' ... '+':
	case '-':
	case '/':
	case '^': goto yy7;
	case '&': goto yy9;
	case '(' ... ')':
	case '[':
	case ']':
	case '{':
	case '}': goto yy10;
	case ',':
	case '.':
	case ';': goto yy12;
	case '0': goto yy14;
	case '1' ... '9': goto yy16;
	case '<': goto yy18;
	case '=': goto yy19;
	case '>': goto yy21;
	case 'A' ... 'Z':
	case '_':
	case 'h':
	case 'j' ... 'k':
	case 'm':
	case 'o':
	case 'q':
	case 'u':
	case 'x' ... 'z': goto yy22;
	case 'a': goto yy25;
	case 'b': goto yy26;
	case 'c': goto yy27;
	case 'd': goto yy28;
	case 'e': goto yy29;
	case 'f': goto yy30;
	case 'g': goto yy31;
	case 'i': goto yy32;
	case 'l': goto yy33;
	case 'n': goto yy34;
	case 'p': goto yy35;
	case 'r': goto yy36;
	case 's': goto yy37;
	case 't': goto yy38;
	case 'v': goto yy39;
	case 'w': goto yy40;
	case '|': goto yy41;
	default: goto yy2;
	}
yy2:
	++YYCURSOR;
yy3:
	{
                break;
            }
yy4:
	++YYCURSOR;
	{
                continue;
            }
yy6:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=': goto yy42;
	default: goto yy3;
	}
yy7:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=': goto yy43;
	default: goto yy8;
	}
yy8:
	{
                tokens.push_back(std::string(YYSTART, YYCURSOR));
                token_limits[tokens.size()-1] = {YYSTART - content, YYCURSOR - content};
                continue;
            }
yy9:
	yych = *++YYCURSOR;
	switch (yych) {
	case '&': goto yy42;
	case '=': goto yy43;
	default: goto yy8;
	}
yy10:
	++YYCURSOR;
	{
                tokens.push_back(std::string(YYSTART, YYCURSOR));
                token_limits[tokens.size()-1] = {YYSTART - content, YYCURSOR - content};
                continue;
            }
yy12:
	++YYCURSOR;
	{
                tokens.push_back(std::string(YYSTART, YYCURSOR));
                token_limits[tokens.size()-1] = {YYSTART - content, YYCURSOR - content};
                continue;
            }
yy14:
	++YYCURSOR;
yy15:
	{
                tokens.push_back(std::string(YYSTART, YYCURSOR));
                i32_value.emplace(tokens.size()-1, std::stoi(tokens.back()));
                token_type.emplace(tokens.size()-1, "integer");
                token_limits[tokens.size()-1] = {YYSTART - content, YYCURSOR - content};
                continue;
            }
yy16:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0' ... '9': goto yy16;
	default: goto yy15;
	}
yy18:
	yych = *++YYCURSOR;
	switch (yych) {
	case '<': goto yy7;
	case '=': goto yy42;
	default: goto yy8;
	}
yy19:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=': goto yy42;
	default: goto yy20;
	}
yy20:
	{
                tokens.push_back(std::string(YYSTART, YYCURSOR));
                token_limits[tokens.size()-1] = {YYSTART - content, YYCURSOR - content};
                continue;
            }
yy21:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=': goto yy42;
	case '>': goto yy44;
	default: goto yy8;
	}
yy22:
	yych = *++YYCURSOR;
yy23:
	switch (yych) {
	case '0' ... '9':
	case 'A' ... 'Z':
	case '_':
	case 'a' ... 'z': goto yy22;
	default: goto yy24;
	}
yy24:
	{
                tokens.push_back(std::string(YYSTART, YYCURSOR));
                token_type.emplace(tokens.size()-1, "identifier");
                token_limits[tokens.size()-1] = {YYSTART - content, YYCURSOR - content};
                continue;
            }
yy25:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'b': goto yy45;
	case 's': goto yy46;
	default: goto yy23;
	}
yy26:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy47;
	case 'r': goto yy48;
	case 'y': goto yy49;
	default: goto yy23;
	}
yy27:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy50;
	case 'h': goto yy51;
	case 'l': goto yy52;
	case 'o': goto yy53;
	default: goto yy23;
	}
yy28:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy54;
	case 'o': goto yy55;
	default: goto yy23;
	}
yy29:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l': goto yy57;
	case 'n': goto yy58;
	case 'x': goto yy59;
	default: goto yy23;
	}
yy30:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy60;
	case 'l': goto yy61;
	case 'o': goto yy62;
	default: goto yy23;
	}
yy31:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy63;
	default: goto yy23;
	}
yy32:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'f': goto yy64;
	case 'm': goto yy65;
	case 'n': goto yy66;
	default: goto yy23;
	}
yy33:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy67;
	default: goto yy23;
	}
yy34:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy68;
	case 'e': goto yy69;
	default: goto yy23;
	}
yy35:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy70;
	case 'r': goto yy71;
	case 'u': goto yy72;
	default: goto yy23;
	}
yy36:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy73;
	default: goto yy23;
	}
yy37:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'h': goto yy74;
	case 't': goto yy75;
	case 'u': goto yy76;
	case 'w': goto yy77;
	case 'y': goto yy78;
	default: goto yy23;
	}
yy38:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'h': goto yy79;
	case 'r': goto yy80;
	default: goto yy23;
	}
yy39:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy81;
	default: goto yy23;
	}
yy40:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'h': goto yy82;
	default: goto yy23;
	}
yy41:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=': goto yy43;
	case '|': goto yy42;
	default: goto yy8;
	}
yy42:
	++YYCURSOR;
	goto yy8;
yy43:
	++YYCURSOR;
	goto yy20;
yy44:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=': goto yy43;
	case '>': goto yy7;
	default: goto yy8;
	}
yy45:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's': goto yy83;
	default: goto yy23;
	}
yy46:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's': goto yy84;
	default: goto yy23;
	}
yy47:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy85;
	default: goto yy23;
	}
yy48:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy86;
	default: goto yy23;
	}
yy49:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy87;
	default: goto yy23;
	}
yy50:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's': goto yy87;
	case 't': goto yy88;
	default: goto yy23;
	}
yy51:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy62;
	default: goto yy23;
	}
yy52:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy89;
	default: goto yy23;
	}
yy53:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy90;
	default: goto yy23;
	}
yy54:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'f': goto yy91;
	default: goto yy23;
	}
yy55:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0' ... '9':
	case 'A' ... 'Z':
	case '_':
	case 'a' ... 't':
	case 'v' ... 'z': goto yy22;
	case 'u': goto yy92;
	default: goto yy56;
	}
yy56:
	{
                tokens.push_back(std::string(YYSTART, YYCURSOR));
                token_limits[tokens.size()-1] = {YYSTART - content, YYCURSOR - content};
                continue;
            }
yy57:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's': goto yy87;
	default: goto yy23;
	}
yy58:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'u': goto yy93;
	default: goto yy23;
	}
yy59:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy94;
	default: goto yy23;
	}
yy60:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy95;
	default: goto yy23;
	}
yy61:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy96;
	default: goto yy23;
	}
yy62:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r': goto yy64;
	default: goto yy23;
	}
yy63:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy97;
	default: goto yy23;
	}
yy64:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0' ... '9':
	case 'A' ... 'Z':
	case '_':
	case 'a' ... 'z': goto yy22;
	default: goto yy56;
	}
yy65:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'p': goto yy98;
	default: goto yy23;
	}
yy66:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's': goto yy99;
	case 't': goto yy100;
	default: goto yy23;
	}
yy67:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy101;
	default: goto yy23;
	}
yy68:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy102;
	default: goto yy23;
	}
yy69:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'w': goto yy64;
	default: goto yy23;
	}
yy70:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c': goto yy103;
	default: goto yy23;
	}
yy71:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy104;
	case 'o': goto yy105;
	default: goto yy23;
	}
yy72:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'b': goto yy106;
	default: goto yy23;
	}
yy73:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy107;
	default: goto yy23;
	}
yy74:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy108;
	default: goto yy23;
	}
yy75:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy109;
	case 'r': goto yy110;
	default: goto yy23;
	}
yy76:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'p': goto yy111;
	default: goto yy23;
	}
yy77:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy112;
	default: goto yy23;
	}
yy78:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy113;
	default: goto yy23;
	}
yy79:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy114;
	case 'r': goto yy115;
	default: goto yy23;
	}
yy80:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy116;
	case 'y': goto yy64;
	default: goto yy23;
	}
yy81:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy117;
	case 'l': goto yy118;
	default: goto yy23;
	}
yy82:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy119;
	default: goto yy23;
	}
yy83:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy120;
	default: goto yy23;
	}
yy84:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy108;
	default: goto yy23;
	}
yy85:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l': goto yy121;
	default: goto yy23;
	}
yy86:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy122;
	default: goto yy23;
	}
yy87:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy64;
	default: goto yy23;
	}
yy88:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c': goto yy123;
	default: goto yy23;
	}
yy89:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's': goto yy114;
	default: goto yy23;
	}
yy90:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's': goto yy124;
	case 't': goto yy125;
	default: goto yy23;
	}
yy91:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy126;
	default: goto yy23;
	}
yy92:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'b': goto yy119;
	default: goto yy23;
	}
yy93:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'm': goto yy64;
	default: goto yy23;
	}
yy94:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy127;
	default: goto yy23;
	}
yy95:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy128;
	default: goto yy23;
	}
yy96:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy124;
	default: goto yy23;
	}
yy97:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy64;
	default: goto yy23;
	}
yy98:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l': goto yy129;
	case 'o': goto yy108;
	default: goto yy23;
	}
yy99:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy130;
	default: goto yy23;
	}
yy100:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0' ... '9':
	case 'A' ... 'Z':
	case '_':
	case 'a' ... 'd':
	case 'f' ... 'z': goto yy22;
	case 'e': goto yy131;
	default: goto yy56;
	}
yy101:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'g': goto yy64;
	default: goto yy23;
	}
yy102:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy132;
	default: goto yy23;
	}
yy103:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'k': goto yy133;
	default: goto yy23;
	}
yy104:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'v': goto yy134;
	default: goto yy23;
	}
yy105:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy135;
	default: goto yy23;
	}
yy106:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l': goto yy136;
	default: goto yy23;
	}
yy107:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'u': goto yy137;
	default: goto yy23;
	}
yy108:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r': goto yy124;
	default: goto yy23;
	}
yy109:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy136;
	default: goto yy23;
	}
yy110:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy138;
	default: goto yy23;
	}
yy111:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy62;
	default: goto yy23;
	}
yy112:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy88;
	default: goto yy23;
	}
yy113:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c': goto yy139;
	default: goto yy23;
	}
yy114:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's': goto yy64;
	default: goto yy23;
	}
yy115:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy140;
	default: goto yy23;
	}
yy116:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy141;
	default: goto yy23;
	}
yy117:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'd': goto yy64;
	default: goto yy23;
	}
yy118:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy142;
	default: goto yy23;
	}
yy119:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l': goto yy87;
	default: goto yy23;
	}
yy120:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r': goto yy143;
	default: goto yy23;
	}
yy121:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy144;
	default: goto yy23;
	}
yy122:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'k': goto yy64;
	default: goto yy23;
	}
yy123:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'h': goto yy64;
	default: goto yy23;
	}
yy124:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy64;
	default: goto yy23;
	}
yy125:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy145;
	default: goto yy23;
	}
yy126:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'u': goto yy146;
	default: goto yy23;
	}
yy127:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy147;
	default: goto yy23;
	}
yy128:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l': goto yy148;
	default: goto yy23;
	}
yy129:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy149;
	default: goto yy23;
	}
yy130:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy150;
	default: goto yy23;
	}
yy131:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r': goto yy151;
	default: goto yy23;
	}
yy132:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'v': goto yy87;
	default: goto yy23;
	}
yy133:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy152;
	default: goto yy23;
	}
yy134:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy49;
	default: goto yy23;
	}
yy135:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy153;
	default: goto yy23;
	}
yy136:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy154;
	default: goto yy23;
	}
yy137:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r': goto yy155;
	default: goto yy23;
	}
yy138:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c': goto yy156;
	default: goto yy23;
	}
yy139:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'h': goto yy157;
	default: goto yy23;
	}
yy140:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'w': goto yy158;
	default: goto yy23;
	}
yy141:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's': goto yy159;
	default: goto yy23;
	}
yy142:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy82;
	default: goto yy23;
	}
yy143:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy160;
	default: goto yy23;
	}
yy144:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy155;
	default: goto yy23;
	}
yy145:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy161;
	default: goto yy23;
	}
yy146:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l': goto yy124;
	default: goto yy23;
	}
yy147:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'd': goto yy114;
	default: goto yy23;
	}
yy148:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0' ... '9':
	case 'A' ... 'Z':
	case '_':
	case 'a' ... 'k':
	case 'm' ... 'z': goto yy22;
	case 'l': goto yy162;
	default: goto yy56;
	}
yy149:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'm': goto yy163;
	default: goto yy23;
	}
yy150:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy164;
	default: goto yy23;
	}
yy151:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'f': goto yy165;
	default: goto yy23;
	}
yy152:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'g': goto yy87;
	default: goto yy23;
	}
yy153:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c': goto yy166;
	default: goto yy23;
	}
yy154:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c': goto yy64;
	default: goto yy23;
	}
yy155:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy64;
	default: goto yy23;
	}
yy156:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy167;
	default: goto yy23;
	}
yy157:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r': goto yy168;
	default: goto yy23;
	}
yy158:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0' ... '9':
	case 'A' ... 'Z':
	case '_':
	case 'a' ... 'r':
	case 't' ... 'z': goto yy22;
	case 's': goto yy64;
	default: goto yy56;
	}
yy159:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy169;
	default: goto yy23;
	}
yy160:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c': goto yy124;
	default: goto yy23;
	}
yy161:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'u': goto yy87;
	default: goto yy23;
	}
yy162:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'y': goto yy64;
	default: goto yy23;
	}
yy163:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy170;
	default: goto yy23;
	}
yy164:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c': goto yy171;
	default: goto yy23;
	}
yy165:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a': goto yy172;
	default: goto yy23;
	}
yy166:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy173;
	default: goto yy23;
	}
yy167:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'f': goto yy174;
	default: goto yy23;
	}
yy168:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy175;
	default: goto yy23;
	}
yy169:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy176;
	default: goto yy23;
	}
yy170:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy177;
	default: goto yy23;
	}
yy171:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy178;
	default: goto yy23;
	}
yy172:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c': goto yy87;
	default: goto yy23;
	}
yy173:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e': goto yy117;
	default: goto yy23;
	}
yy174:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'p': goto yy64;
	default: goto yy23;
	}
yy175:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy179;
	default: goto yy23;
	}
yy176:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n': goto yy124;
	default: goto yy23;
	}
yy177:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't': goto yy114;
	default: goto yy23;
	}
yy178:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o': goto yy180;
	default: goto yy23;
	}
yy179:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i': goto yy181;
	default: goto yy23;
	}
yy180:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'f': goto yy64;
	default: goto yy23;
	}
yy181:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'z': goto yy173;
	default: goto yy23;
	}
}

        }
        return {tokens, token_limits, i32_value, token_type};
    }
}

